syntax = "proto3";

package com.mlp.gate;

option java_multiple_files = true;

service Gate {
  rpc healthCheck (HeartBeatProto) returns (HeartBeatProto);

  rpc processAsync(stream ServiceToGateProto) returns (stream GateToServiceProto) {}

  rpc process(ClientRequestProto) returns (ClientResponseProto) {}

//  rpc processWithResponseStream(ClientRequestProto) returns (stream ClientPartialResponseProto) {}
}

message ServiceDescriptorProto {
  string name = 1;

  bool fittable = 10;
  map<string, MethodDescriptorProto> methods = 20;

  // Контент протобаф-спеки для специфических типов данных, используемых данных экшеном.
  // пока что это поле предназначено для экспериментов
  map<string, string> schemaFiles = 30;
}

message MethodDescriptorProto {
  map<string, ParamDescriptorProto> input = 1;
  ParamDescriptorProto output = 2;
  optional bool fitted = 3;
}

message ParamDescriptorProto {
  string type = 1;
}

message ServiceInfoProto {
  int64 accountId = 1;
  int64 modelId = 2;
  string modelName = 3;
  string authToken = 4;
  optional string bucketName = 5;
}

message ServiceToGateProto {
  int64 requestId = 1;

  oneof body {
    HeartBeatProto heartBeat = 2;
    StartServingProto startServing = 3;
    StopServingProto stopServing = 4;

    PredictResponseProto predict = 101;
    FitResponseProto fit = 102;
    ExtendedResponseProto ext = 103;

    StatusResponseProto status = 105;

    BatchResponseProto batch = 106;

    PartialPredictResponseProto partialPredict = 107;

    ApiErrorProto error = 201;

    // TODO Deprecated
    PipelineRequestProto request = 301;
  }

  map<string, string> headers = 1000;
}

message GateToServiceProto {
  int64 requestId = 1;

  oneof body {
    HeartBeatProto heartBeat = 2;
    ClusterUpdateProto cluster = 3;
    ServiceInfoProto serviceInfo = 4;
    StopServingProto stopServing = 5;

    PredictRequestProto predict = 101;
    FitRequestProto fit = 102;
    ExtendedRequestProto ext = 103;

    StatusRequestProto status = 105;

    BatchRequestProto batch = 106;

    PartialPredictRequestProto partialPredict = 107;

    ApiErrorProto error = 201;

    // TODO Deprecated
    PipelineResponseProto response = 301;
  }

  map<string, string> headers = 1000;
}

message HeartBeatProto {
  string status = 1;
  int32  interval = 2;
}

message StartServingProto {
  // Чтобы зарегистрироваться, сервис должен указать секретный ключ. Этот ключ генерирует Кайла
  // и передаёт в Cloud через env-переменные
  string connectionToken = 1;

  ServiceDescriptorProto serviceDescriptor = 3;
}

message StopServingProto {
  optional string reason = 1;
}

message PredictRequestProto {
  PayloadProto data = 101;
  optional PayloadProto config = 102;
}

message PartialPredictRequestProto {
  PayloadProto data = 101;
  optional PayloadProto config = 102;
  optional bool start = 103;
  optional bool finish = 104;
}

message BatchRequestProto {
  repeated BatchPayloadProto data = 101;
  optional PayloadProto config = 102;
}

message PredictResponseProto {
  PayloadProto data = 101;
}

message PartialPredictResponseProto {
  PayloadProto data = 101;
  optional bool start = 103;
  optional bool finish = 104;
}

message BatchResponseProto {
  repeated BatchPayloadResponseProto data = 101;
}

message DatasetInfoProto {
  int64 accountId = 1;
  int64 datasetId = 2;
  string name = 3;
  string type = 4;
}

message FitRequestProto {
  PayloadProto trainData = 101;
  optional PayloadProto targetsData = 102;
  optional PayloadProto config = 103;
  string modelDir = 104;
  optional string previousModelDir = 105;
  ServiceInfoProto targetServiceInfo = 106;
  DatasetInfoProto datasetInfo = 107;
}

message FitResponseProto {
}

message ExtendedRequestProto {
  string methodName = 1;
  map<string, PayloadProto> params = 2;
}

message ExtendedResponseProto {
  PayloadProto data = 1;
}

message BatchPayloadProto {
  int64 requestId = 1;
  PayloadProto data = 101;
}

message BatchPayloadResponseProto {
  int64 requestId = 1;

  oneof body {
    PredictResponseProto predict = 101;
    ApiErrorProto error = 201;
  }
}

message StatusRequestProto {
}

message StatusResponseProto {
  repeated string connectedGates = 1;
  bool connectedToAllGates = 2;
}

message PayloadProto {
  // имя класса, закодированного в text или bytes
  optional string dataType = 1;

  oneof body {
    string json = 101;
    bytes protobuf = 102;
  }
}

enum SimpleStatusProto {
  OK = 0;
  BAD_REQUEST = 400;
  NOT_FOUND = 404;
  INTERNAL_SERVER_ERROR = 500;
}

message ApiErrorProto {
  string code = 1;
  string message = 2;
  SimpleStatusProto status = 3;
  map<string, string> args = 4;
}

message ClientRequestProto {
  string account = 1; // тут можно передавать либо id либо shortName аккаунта и модели соответственно
  string model = 2;   // обработка будет происходить так: если только цифры - значит id, иначе name

  // Чтобы обратиться к экшену, клиент должен указать секретный токен.
  // Это может быть либо id-сессии в AA, либо отдельный токен доступа, который можно сгенерировать и получить
  // через MLP API. Внутри системы, токен будет ассоциирован с конкретным аккаунтом в АА.
  string authToken = 3;

  // Таймаут в секундах. Если не указан, то используется значение по умолчанию
  int32 timeoutSec = 4;

  oneof body {
    PredictRequestProto predict = 101;
    ExtendedRequestProto ext = 103;
  }

  map<string, string> headers = 1000;
}

message ClientResponseProto {
  oneof body {
    PredictResponseProto predict = 101;
    ExtendedResponseProto ext = 103;

    ApiErrorProto error = 201;
  }

  map<string, string> headers = 1000;
}

//  Заготовка для реализации поддержки tts-стриминга через наш grpc-протокол
//
//message ClientPartialInitProto {
//  string account = 1; // тут можно передавать либо id либо shortName аккаунта и модели соответственно
//  string model = 2;   // обработка будет происходить так: если только цифры - значит id, иначе name
//  string authToken = 3;
//  int32 timeoutSec = 4;
//  optional PayloadProto config = 102;
//}
//
//message ClientPartialRequestProto {
//  oneof body {
//    ClientPartialInitProto init = 101;
//    PartialPredictResponseProto chunk = 104;
//  }
//
//  map<string, string> headers = 1000;
//}
//
//message ClientPartialResponseProto {
//  oneof body {
//    PartialPredictResponseProto partial = 104;
//    ApiErrorProto error = 201;
//  }
//
//  map<string, string> headers = 1000;
//}

// TODO Deprecated
message PipelineRequestProto {
  string account = 1;
  string model = 2;

  oneof body {
    PredictRequestProto predict = 101;
    ExtendedRequestProto ext = 102;
    ClientTokenRequestProto token = 103;
  }
}

// TODO Deprecated
message PipelineResponseProto {
  oneof body {
    PredictResponseProto predict = 101;
    ExtendedResponseProto ext = 102;
    ClientTokenResponseProto token = 103;

    ApiErrorProto error = 201;
  }
}

message ClientTokenRequestProto {
}

message ClientTokenResponseProto {
  string token = 1;
}

message ClusterUpdateProto {
  repeated string servers = 1;
  string currentServer = 2;
}

message SimpleTextProto {
  string text = 1;
}

