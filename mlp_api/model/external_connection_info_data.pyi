# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mlp_api import schemas  # noqa: F401


class ExternalConnectionInfoData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "connected",
            "envVariables",
            "id",
        }
        
        class properties:
        
            @staticmethod
            def id() -> typing.Type['ModelInstancePK']:
                return ModelInstancePK
            connected = schemas.BoolSchema
            
            
            class envVariables(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'envVariables':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            dockerRunCommand = schemas.StrSchema
            dockerComposeContent = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "connected": connected,
                "envVariables": envVariables,
                "dockerRunCommand": dockerRunCommand,
                "dockerComposeContent": dockerComposeContent,
            }
    
    connected: MetaOapg.properties.connected
    envVariables: MetaOapg.properties.envVariables
    id: 'ModelInstancePK'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'ModelInstancePK': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connected"]) -> MetaOapg.properties.connected: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["envVariables"]) -> MetaOapg.properties.envVariables: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dockerRunCommand"]) -> MetaOapg.properties.dockerRunCommand: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dockerComposeContent"]) -> MetaOapg.properties.dockerComposeContent: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "connected", "envVariables", "dockerRunCommand", "dockerComposeContent", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'ModelInstancePK': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connected"]) -> MetaOapg.properties.connected: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["envVariables"]) -> MetaOapg.properties.envVariables: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dockerRunCommand"]) -> typing.Union[MetaOapg.properties.dockerRunCommand, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dockerComposeContent"]) -> typing.Union[MetaOapg.properties.dockerComposeContent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "connected", "envVariables", "dockerRunCommand", "dockerComposeContent", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        connected: typing.Union[MetaOapg.properties.connected, bool, ],
        envVariables: typing.Union[MetaOapg.properties.envVariables, dict, frozendict.frozendict, ],
        id: 'ModelInstancePK',
        dockerRunCommand: typing.Union[MetaOapg.properties.dockerRunCommand, str, schemas.Unset] = schemas.unset,
        dockerComposeContent: typing.Union[MetaOapg.properties.dockerComposeContent, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ExternalConnectionInfoData':
        return super().__new__(
            cls,
            *_args,
            connected=connected,
            envVariables=envVariables,
            id=id,
            dockerRunCommand=dockerRunCommand,
            dockerComposeContent=dockerComposeContent,
            _configuration=_configuration,
            **kwargs,
        )

from mlp_api.model.model_instance_pk import ModelInstancePK
