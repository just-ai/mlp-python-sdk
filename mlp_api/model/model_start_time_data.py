# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mlp_api import schemas  # noqa: F401


class ModelStartTimeData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "instanceId",
            "modelId",
            "instanceStartTime",
        }
        
        class properties:
            modelId = schemas.Int64Schema
            instanceId = schemas.Int64Schema
            instanceStartTime = schemas.DateTimeSchema
            modelAverageStartTimeSec = schemas.Float32Schema
            instanceStartedTime = schemas.DateTimeSchema
            instanceErrorTime = schemas.DateTimeSchema
            __annotations__ = {
                "modelId": modelId,
                "instanceId": instanceId,
                "instanceStartTime": instanceStartTime,
                "modelAverageStartTimeSec": modelAverageStartTimeSec,
                "instanceStartedTime": instanceStartedTime,
                "instanceErrorTime": instanceErrorTime,
            }
    
    instanceId: MetaOapg.properties.instanceId
    modelId: MetaOapg.properties.modelId
    instanceStartTime: MetaOapg.properties.instanceStartTime
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelId"]) -> MetaOapg.properties.modelId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instanceId"]) -> MetaOapg.properties.instanceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instanceStartTime"]) -> MetaOapg.properties.instanceStartTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelAverageStartTimeSec"]) -> MetaOapg.properties.modelAverageStartTimeSec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instanceStartedTime"]) -> MetaOapg.properties.instanceStartedTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instanceErrorTime"]) -> MetaOapg.properties.instanceErrorTime: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["modelId", "instanceId", "instanceStartTime", "modelAverageStartTimeSec", "instanceStartedTime", "instanceErrorTime", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelId"]) -> MetaOapg.properties.modelId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instanceId"]) -> MetaOapg.properties.instanceId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instanceStartTime"]) -> MetaOapg.properties.instanceStartTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelAverageStartTimeSec"]) -> typing.Union[MetaOapg.properties.modelAverageStartTimeSec, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instanceStartedTime"]) -> typing.Union[MetaOapg.properties.instanceStartedTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instanceErrorTime"]) -> typing.Union[MetaOapg.properties.instanceErrorTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["modelId", "instanceId", "instanceStartTime", "modelAverageStartTimeSec", "instanceStartedTime", "instanceErrorTime", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        instanceId: typing.Union[MetaOapg.properties.instanceId, decimal.Decimal, int, ],
        modelId: typing.Union[MetaOapg.properties.modelId, decimal.Decimal, int, ],
        instanceStartTime: typing.Union[MetaOapg.properties.instanceStartTime, str, datetime, ],
        modelAverageStartTimeSec: typing.Union[MetaOapg.properties.modelAverageStartTimeSec, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        instanceStartedTime: typing.Union[MetaOapg.properties.instanceStartedTime, str, datetime, schemas.Unset] = schemas.unset,
        instanceErrorTime: typing.Union[MetaOapg.properties.instanceErrorTime, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelStartTimeData':
        return super().__new__(
            cls,
            *_args,
            instanceId=instanceId,
            modelId=modelId,
            instanceStartTime=instanceStartTime,
            modelAverageStartTimeSec=modelAverageStartTimeSec,
            instanceStartedTime=instanceStartedTime,
            instanceErrorTime=instanceErrorTime,
            _configuration=_configuration,
            **kwargs,
        )
