# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mlp_api import schemas  # noqa: F401


class DataImageMountData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "dataImageId",
            "targetPath",
        }
        
        class properties:
            dataImageId = schemas.Int64Schema
            targetPath = schemas.StrSchema
            dmId = schemas.Int64Schema
            dataImage = schemas.StrSchema
            dataImageName = schemas.StrSchema
            sourcePath = schemas.StrSchema
            __annotations__ = {
                "dataImageId": dataImageId,
                "targetPath": targetPath,
                "dmId": dmId,
                "dataImage": dataImage,
                "dataImageName": dataImageName,
                "sourcePath": sourcePath,
            }
    
    dataImageId: MetaOapg.properties.dataImageId
    targetPath: MetaOapg.properties.targetPath
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataImageId"]) -> MetaOapg.properties.dataImageId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetPath"]) -> MetaOapg.properties.targetPath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dmId"]) -> MetaOapg.properties.dmId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataImage"]) -> MetaOapg.properties.dataImage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataImageName"]) -> MetaOapg.properties.dataImageName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourcePath"]) -> MetaOapg.properties.sourcePath: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dataImageId", "targetPath", "dmId", "dataImage", "dataImageName", "sourcePath", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataImageId"]) -> MetaOapg.properties.dataImageId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetPath"]) -> MetaOapg.properties.targetPath: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dmId"]) -> typing.Union[MetaOapg.properties.dmId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataImage"]) -> typing.Union[MetaOapg.properties.dataImage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataImageName"]) -> typing.Union[MetaOapg.properties.dataImageName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourcePath"]) -> typing.Union[MetaOapg.properties.sourcePath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dataImageId", "targetPath", "dmId", "dataImage", "dataImageName", "sourcePath", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        dataImageId: typing.Union[MetaOapg.properties.dataImageId, decimal.Decimal, int, ],
        targetPath: typing.Union[MetaOapg.properties.targetPath, str, ],
        dmId: typing.Union[MetaOapg.properties.dmId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        dataImage: typing.Union[MetaOapg.properties.dataImage, str, schemas.Unset] = schemas.unset,
        dataImageName: typing.Union[MetaOapg.properties.dataImageName, str, schemas.Unset] = schemas.unset,
        sourcePath: typing.Union[MetaOapg.properties.sourcePath, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DataImageMountData':
        return super().__new__(
            cls,
            *_args,
            dataImageId=dataImageId,
            targetPath=targetPath,
            dmId=dmId,
            dataImage=dataImage,
            dataImageName=dataImageName,
            sourcePath=sourcePath,
            _configuration=_configuration,
            **kwargs,
        )
