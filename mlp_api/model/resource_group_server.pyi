# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mlp_api import schemas  # noqa: F401


class ResourceGroupServer(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "isPublicTemplate",
            "tarifficationPrice",
            "isAutoCreated",
            "kubernetesSynthetic",
            "name",
            "id",
            "ownerId",
            "type",
            "rawConfiguration",
            "createTimestamp",
            "status",
        }
        
        class properties:
            id = schemas.Int64Schema
            name = schemas.StrSchema
            ownerId = schemas.Int64Schema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DOCKER(cls):
                    return cls("DOCKER")
                
                @schemas.classproperty
                def KUBERNETES(cls):
                    return cls("KUBERNETES")
                
                @schemas.classproperty
                def HOSTING_SERVER(cls):
                    return cls("HOSTING_SERVER")
                
                @schemas.classproperty
                def SHARED_RESOURCE_QUOTA(cls):
                    return cls("SHARED_RESOURCE_QUOTA")
            isPublicTemplate = schemas.BoolSchema
            rawConfiguration = schemas.StrSchema
            isAutoCreated = schemas.BoolSchema
            tarifficationPrice = schemas.NumberSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def IDLE(cls):
                    return cls("IDLE")
                
                @schemas.classproperty
                def STARTING(cls):
                    return cls("STARTING")
                
                @schemas.classproperty
                def STARTED(cls):
                    return cls("STARTED")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("FAILED")
                
                @schemas.classproperty
                def DELETING(cls):
                    return cls("DELETING")
                
                @schemas.classproperty
                def DELETED(cls):
                    return cls("DELETED")
            createTimestamp = schemas.DateTimeSchema
            kubernetesSynthetic = schemas.BoolSchema
            groupName = schemas.StrSchema
            templateCapacity = schemas.StrSchema
            templateDescription = schemas.StrSchema
            
            
            class tarifficationPeriod(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def SECOND(cls):
                    return cls("SECOND")
                
                @schemas.classproperty
                def MINUTE(cls):
                    return cls("MINUTE")
                
                @schemas.classproperty
                def HOUR(cls):
                    return cls("HOUR")
                
                @schemas.classproperty
                def DAY(cls):
                    return cls("DAY")
                
                @schemas.classproperty
                def MONTH(cls):
                    return cls("MONTH")
                
                @schemas.classproperty
                def YEAR(cls):
                    return cls("YEAR")
            lastCapacity = schemas.StrSchema
            lastHeartbeat = schemas.DateTimeSchema
            deleteTimestamp = schemas.DateTimeSchema
            nextBillingActionTimestamp = schemas.DateTimeSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "ownerId": ownerId,
                "type": type,
                "isPublicTemplate": isPublicTemplate,
                "rawConfiguration": rawConfiguration,
                "isAutoCreated": isAutoCreated,
                "tarifficationPrice": tarifficationPrice,
                "status": status,
                "createTimestamp": createTimestamp,
                "kubernetesSynthetic": kubernetesSynthetic,
                "groupName": groupName,
                "templateCapacity": templateCapacity,
                "templateDescription": templateDescription,
                "tarifficationPeriod": tarifficationPeriod,
                "lastCapacity": lastCapacity,
                "lastHeartbeat": lastHeartbeat,
                "deleteTimestamp": deleteTimestamp,
                "nextBillingActionTimestamp": nextBillingActionTimestamp,
            }
    
    isPublicTemplate: MetaOapg.properties.isPublicTemplate
    tarifficationPrice: MetaOapg.properties.tarifficationPrice
    isAutoCreated: MetaOapg.properties.isAutoCreated
    kubernetesSynthetic: MetaOapg.properties.kubernetesSynthetic
    name: MetaOapg.properties.name
    id: MetaOapg.properties.id
    ownerId: MetaOapg.properties.ownerId
    type: MetaOapg.properties.type
    rawConfiguration: MetaOapg.properties.rawConfiguration
    createTimestamp: MetaOapg.properties.createTimestamp
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ownerId"]) -> MetaOapg.properties.ownerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isPublicTemplate"]) -> MetaOapg.properties.isPublicTemplate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rawConfiguration"]) -> MetaOapg.properties.rawConfiguration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isAutoCreated"]) -> MetaOapg.properties.isAutoCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tarifficationPrice"]) -> MetaOapg.properties.tarifficationPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createTimestamp"]) -> MetaOapg.properties.createTimestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kubernetesSynthetic"]) -> MetaOapg.properties.kubernetesSynthetic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupName"]) -> MetaOapg.properties.groupName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["templateCapacity"]) -> MetaOapg.properties.templateCapacity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["templateDescription"]) -> MetaOapg.properties.templateDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tarifficationPeriod"]) -> MetaOapg.properties.tarifficationPeriod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastCapacity"]) -> MetaOapg.properties.lastCapacity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastHeartbeat"]) -> MetaOapg.properties.lastHeartbeat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleteTimestamp"]) -> MetaOapg.properties.deleteTimestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nextBillingActionTimestamp"]) -> MetaOapg.properties.nextBillingActionTimestamp: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "ownerId", "type", "isPublicTemplate", "rawConfiguration", "isAutoCreated", "tarifficationPrice", "status", "createTimestamp", "kubernetesSynthetic", "groupName", "templateCapacity", "templateDescription", "tarifficationPeriod", "lastCapacity", "lastHeartbeat", "deleteTimestamp", "nextBillingActionTimestamp", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ownerId"]) -> MetaOapg.properties.ownerId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isPublicTemplate"]) -> MetaOapg.properties.isPublicTemplate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rawConfiguration"]) -> MetaOapg.properties.rawConfiguration: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isAutoCreated"]) -> MetaOapg.properties.isAutoCreated: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tarifficationPrice"]) -> MetaOapg.properties.tarifficationPrice: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createTimestamp"]) -> MetaOapg.properties.createTimestamp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kubernetesSynthetic"]) -> MetaOapg.properties.kubernetesSynthetic: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupName"]) -> typing.Union[MetaOapg.properties.groupName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["templateCapacity"]) -> typing.Union[MetaOapg.properties.templateCapacity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["templateDescription"]) -> typing.Union[MetaOapg.properties.templateDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tarifficationPeriod"]) -> typing.Union[MetaOapg.properties.tarifficationPeriod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastCapacity"]) -> typing.Union[MetaOapg.properties.lastCapacity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastHeartbeat"]) -> typing.Union[MetaOapg.properties.lastHeartbeat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleteTimestamp"]) -> typing.Union[MetaOapg.properties.deleteTimestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nextBillingActionTimestamp"]) -> typing.Union[MetaOapg.properties.nextBillingActionTimestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "ownerId", "type", "isPublicTemplate", "rawConfiguration", "isAutoCreated", "tarifficationPrice", "status", "createTimestamp", "kubernetesSynthetic", "groupName", "templateCapacity", "templateDescription", "tarifficationPeriod", "lastCapacity", "lastHeartbeat", "deleteTimestamp", "nextBillingActionTimestamp", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        isPublicTemplate: typing.Union[MetaOapg.properties.isPublicTemplate, bool, ],
        tarifficationPrice: typing.Union[MetaOapg.properties.tarifficationPrice, decimal.Decimal, int, float, ],
        isAutoCreated: typing.Union[MetaOapg.properties.isAutoCreated, bool, ],
        kubernetesSynthetic: typing.Union[MetaOapg.properties.kubernetesSynthetic, bool, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        ownerId: typing.Union[MetaOapg.properties.ownerId, decimal.Decimal, int, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        rawConfiguration: typing.Union[MetaOapg.properties.rawConfiguration, str, ],
        createTimestamp: typing.Union[MetaOapg.properties.createTimestamp, str, datetime, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        groupName: typing.Union[MetaOapg.properties.groupName, str, schemas.Unset] = schemas.unset,
        templateCapacity: typing.Union[MetaOapg.properties.templateCapacity, str, schemas.Unset] = schemas.unset,
        templateDescription: typing.Union[MetaOapg.properties.templateDescription, str, schemas.Unset] = schemas.unset,
        tarifficationPeriod: typing.Union[MetaOapg.properties.tarifficationPeriod, str, schemas.Unset] = schemas.unset,
        lastCapacity: typing.Union[MetaOapg.properties.lastCapacity, str, schemas.Unset] = schemas.unset,
        lastHeartbeat: typing.Union[MetaOapg.properties.lastHeartbeat, str, datetime, schemas.Unset] = schemas.unset,
        deleteTimestamp: typing.Union[MetaOapg.properties.deleteTimestamp, str, datetime, schemas.Unset] = schemas.unset,
        nextBillingActionTimestamp: typing.Union[MetaOapg.properties.nextBillingActionTimestamp, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ResourceGroupServer':
        return super().__new__(
            cls,
            *_args,
            isPublicTemplate=isPublicTemplate,
            tarifficationPrice=tarifficationPrice,
            isAutoCreated=isAutoCreated,
            kubernetesSynthetic=kubernetesSynthetic,
            name=name,
            id=id,
            ownerId=ownerId,
            type=type,
            rawConfiguration=rawConfiguration,
            createTimestamp=createTimestamp,
            status=status,
            groupName=groupName,
            templateCapacity=templateCapacity,
            templateDescription=templateDescription,
            tarifficationPeriod=tarifficationPeriod,
            lastCapacity=lastCapacity,
            lastHeartbeat=lastHeartbeat,
            deleteTimestamp=deleteTimestamp,
            nextBillingActionTimestamp=nextBillingActionTimestamp,
            _configuration=_configuration,
            **kwargs,
        )
