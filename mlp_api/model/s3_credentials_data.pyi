# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mlp_api import schemas  # noqa: F401


class S3CredentialsData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "bucketName",
            "s3Url",
            "secretKey",
            "accessKey",
        }
        
        class properties:
            s3Url = schemas.StrSchema
            accessKey = schemas.StrSchema
            secretKey = schemas.StrSchema
            bucketName = schemas.StrSchema
            __annotations__ = {
                "s3Url": s3Url,
                "accessKey": accessKey,
                "secretKey": secretKey,
                "bucketName": bucketName,
            }
    
    bucketName: MetaOapg.properties.bucketName
    s3Url: MetaOapg.properties.s3Url
    secretKey: MetaOapg.properties.secretKey
    accessKey: MetaOapg.properties.accessKey
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["s3Url"]) -> MetaOapg.properties.s3Url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accessKey"]) -> MetaOapg.properties.accessKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secretKey"]) -> MetaOapg.properties.secretKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bucketName"]) -> MetaOapg.properties.bucketName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["s3Url", "accessKey", "secretKey", "bucketName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["s3Url"]) -> MetaOapg.properties.s3Url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accessKey"]) -> MetaOapg.properties.accessKey: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secretKey"]) -> MetaOapg.properties.secretKey: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bucketName"]) -> MetaOapg.properties.bucketName: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["s3Url", "accessKey", "secretKey", "bucketName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        bucketName: typing.Union[MetaOapg.properties.bucketName, str, ],
        s3Url: typing.Union[MetaOapg.properties.s3Url, str, ],
        secretKey: typing.Union[MetaOapg.properties.secretKey, str, ],
        accessKey: typing.Union[MetaOapg.properties.accessKey, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'S3CredentialsData':
        return super().__new__(
            cls,
            *_args,
            bucketName=bucketName,
            s3Url=s3Url,
            secretKey=secretKey,
            accessKey=accessKey,
            _configuration=_configuration,
            **kwargs,
        )
