# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mlp_api import schemas  # noqa: F401


class AccountDataDump(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class apiTokens(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'apiTokens':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class modelGroups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ModelGroupDump']:
                        return ModelGroupDump
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ModelGroupDump'], typing.List['ModelGroupDump']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'modelGroups':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ModelGroupDump':
                    return super().__getitem__(i)
            
            
            class images(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ImageDump']:
                        return ImageDump
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ImageDump'], typing.List['ImageDump']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'images':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ImageDump':
                    return super().__getitem__(i)
            
            
            class dataImages(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DataImageDump']:
                        return DataImageDump
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DataImageDump'], typing.List['DataImageDump']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dataImages':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DataImageDump':
                    return super().__getitem__(i)
            
            
            class models(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ModelDump']:
                        return ModelDump
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ModelDump'], typing.List['ModelDump']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'models':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ModelDump':
                    return super().__getitem__(i)
            
            
            class serverTemplates(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ServerTemplateDump']:
                        return ServerTemplateDump
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ServerTemplateDump'], typing.List['ServerTemplateDump']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'serverTemplates':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ServerTemplateDump':
                    return super().__getitem__(i)
            __annotations__ = {
                "apiTokens": apiTokens,
                "modelGroups": modelGroups,
                "images": images,
                "dataImages": dataImages,
                "models": models,
                "serverTemplates": serverTemplates,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apiTokens"]) -> MetaOapg.properties.apiTokens: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelGroups"]) -> MetaOapg.properties.modelGroups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["images"]) -> MetaOapg.properties.images: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataImages"]) -> MetaOapg.properties.dataImages: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["models"]) -> MetaOapg.properties.models: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serverTemplates"]) -> MetaOapg.properties.serverTemplates: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["apiTokens", "modelGroups", "images", "dataImages", "models", "serverTemplates", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apiTokens"]) -> typing.Union[MetaOapg.properties.apiTokens, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelGroups"]) -> typing.Union[MetaOapg.properties.modelGroups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["images"]) -> typing.Union[MetaOapg.properties.images, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataImages"]) -> typing.Union[MetaOapg.properties.dataImages, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["models"]) -> typing.Union[MetaOapg.properties.models, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serverTemplates"]) -> typing.Union[MetaOapg.properties.serverTemplates, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["apiTokens", "modelGroups", "images", "dataImages", "models", "serverTemplates", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        apiTokens: typing.Union[MetaOapg.properties.apiTokens, list, tuple, schemas.Unset] = schemas.unset,
        modelGroups: typing.Union[MetaOapg.properties.modelGroups, list, tuple, schemas.Unset] = schemas.unset,
        images: typing.Union[MetaOapg.properties.images, list, tuple, schemas.Unset] = schemas.unset,
        dataImages: typing.Union[MetaOapg.properties.dataImages, list, tuple, schemas.Unset] = schemas.unset,
        models: typing.Union[MetaOapg.properties.models, list, tuple, schemas.Unset] = schemas.unset,
        serverTemplates: typing.Union[MetaOapg.properties.serverTemplates, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AccountDataDump':
        return super().__new__(
            cls,
            *_args,
            apiTokens=apiTokens,
            modelGroups=modelGroups,
            images=images,
            dataImages=dataImages,
            models=models,
            serverTemplates=serverTemplates,
            _configuration=_configuration,
            **kwargs,
        )

from mlp_api.model.data_image_dump import DataImageDump
from mlp_api.model.image_dump import ImageDump
from mlp_api.model.model_dump import ModelDump
from mlp_api.model.model_group_dump import ModelGroupDump
from mlp_api.model.server_template_dump import ServerTemplateDump
