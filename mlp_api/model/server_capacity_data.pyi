# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mlp_api import schemas  # noqa: F401


class ServerCapacityData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "disk",
            "gpuModels",
            "memory",
            "cpu",
        }
        
        class properties:
            cpu = schemas.StrSchema
            memory = schemas.StrSchema
            disk = schemas.StrSchema
            
            
            class gpuModels(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'gpuModels':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "cpu": cpu,
                "memory": memory,
                "disk": disk,
                "gpuModels": gpuModels,
            }
    
    disk: MetaOapg.properties.disk
    gpuModels: MetaOapg.properties.gpuModels
    memory: MetaOapg.properties.memory
    cpu: MetaOapg.properties.cpu
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cpu"]) -> MetaOapg.properties.cpu: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memory"]) -> MetaOapg.properties.memory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disk"]) -> MetaOapg.properties.disk: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gpuModels"]) -> MetaOapg.properties.gpuModels: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cpu", "memory", "disk", "gpuModels", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cpu"]) -> MetaOapg.properties.cpu: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memory"]) -> MetaOapg.properties.memory: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disk"]) -> MetaOapg.properties.disk: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gpuModels"]) -> MetaOapg.properties.gpuModels: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cpu", "memory", "disk", "gpuModels", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        disk: typing.Union[MetaOapg.properties.disk, str, ],
        gpuModels: typing.Union[MetaOapg.properties.gpuModels, list, tuple, ],
        memory: typing.Union[MetaOapg.properties.memory, str, ],
        cpu: typing.Union[MetaOapg.properties.cpu, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ServerCapacityData':
        return super().__new__(
            cls,
            *_args,
            disk=disk,
            gpuModels=gpuModels,
            memory=memory,
            cpu=cpu,
            _configuration=_configuration,
            **kwargs,
        )
