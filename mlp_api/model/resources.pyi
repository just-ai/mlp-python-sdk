# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mlp_api import schemas  # noqa: F401


class Resources(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "strictlyNegativeOrZero",
            "baseInstanceCount",
            "disk",
            "podsCount",
            "derivedInstanceCount",
            "cpu",
            "gpu",
            "ram",
        }
        
        class properties:
        
            @staticmethod
            def cpu() -> typing.Type['Quantity']:
                return Quantity
        
            @staticmethod
            def ram() -> typing.Type['Quantity']:
                return Quantity
        
            @staticmethod
            def disk() -> typing.Type['Quantity']:
                return Quantity
            gpu = schemas.Int32Schema
            baseInstanceCount = schemas.Int32Schema
            derivedInstanceCount = schemas.Int32Schema
            podsCount = schemas.Int32Schema
            strictlyNegativeOrZero = schemas.BoolSchema
            __annotations__ = {
                "cpu": cpu,
                "ram": ram,
                "disk": disk,
                "gpu": gpu,
                "baseInstanceCount": baseInstanceCount,
                "derivedInstanceCount": derivedInstanceCount,
                "podsCount": podsCount,
                "strictlyNegativeOrZero": strictlyNegativeOrZero,
            }
    
    strictlyNegativeOrZero: MetaOapg.properties.strictlyNegativeOrZero
    baseInstanceCount: MetaOapg.properties.baseInstanceCount
    disk: 'Quantity'
    podsCount: MetaOapg.properties.podsCount
    derivedInstanceCount: MetaOapg.properties.derivedInstanceCount
    cpu: 'Quantity'
    gpu: MetaOapg.properties.gpu
    ram: 'Quantity'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cpu"]) -> 'Quantity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ram"]) -> 'Quantity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disk"]) -> 'Quantity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gpu"]) -> MetaOapg.properties.gpu: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["baseInstanceCount"]) -> MetaOapg.properties.baseInstanceCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["derivedInstanceCount"]) -> MetaOapg.properties.derivedInstanceCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["podsCount"]) -> MetaOapg.properties.podsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["strictlyNegativeOrZero"]) -> MetaOapg.properties.strictlyNegativeOrZero: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cpu", "ram", "disk", "gpu", "baseInstanceCount", "derivedInstanceCount", "podsCount", "strictlyNegativeOrZero", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cpu"]) -> 'Quantity': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ram"]) -> 'Quantity': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disk"]) -> 'Quantity': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gpu"]) -> MetaOapg.properties.gpu: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["baseInstanceCount"]) -> MetaOapg.properties.baseInstanceCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["derivedInstanceCount"]) -> MetaOapg.properties.derivedInstanceCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["podsCount"]) -> MetaOapg.properties.podsCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["strictlyNegativeOrZero"]) -> MetaOapg.properties.strictlyNegativeOrZero: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cpu", "ram", "disk", "gpu", "baseInstanceCount", "derivedInstanceCount", "podsCount", "strictlyNegativeOrZero", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        strictlyNegativeOrZero: typing.Union[MetaOapg.properties.strictlyNegativeOrZero, bool, ],
        baseInstanceCount: typing.Union[MetaOapg.properties.baseInstanceCount, decimal.Decimal, int, ],
        disk: 'Quantity',
        podsCount: typing.Union[MetaOapg.properties.podsCount, decimal.Decimal, int, ],
        derivedInstanceCount: typing.Union[MetaOapg.properties.derivedInstanceCount, decimal.Decimal, int, ],
        cpu: 'Quantity',
        gpu: typing.Union[MetaOapg.properties.gpu, decimal.Decimal, int, ],
        ram: 'Quantity',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Resources':
        return super().__new__(
            cls,
            *_args,
            strictlyNegativeOrZero=strictlyNegativeOrZero,
            baseInstanceCount=baseInstanceCount,
            disk=disk,
            podsCount=podsCount,
            derivedInstanceCount=derivedInstanceCount,
            cpu=cpu,
            gpu=gpu,
            ram=ram,
            _configuration=_configuration,
            **kwargs,
        )

from mlp_api.model.quantity import Quantity
