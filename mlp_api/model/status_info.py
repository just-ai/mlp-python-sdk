# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mlp_api import schemas  # noqa: F401


class StatusInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "isDeleted",
            "totalStatus",
            "isConnectedToAllGates",
        }
        
        class properties:
            
            
            class totalStatus(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "RUNNING": "RUNNING",
                        "WAITING": "WAITING",
                        "SLEEPING": "SLEEPING",
                        "FAILED": "FAILED",
                        "DELETED": "DELETED",
                    }
                
                @schemas.classproperty
                def RUNNING(cls):
                    return cls("RUNNING")
                
                @schemas.classproperty
                def WAITING(cls):
                    return cls("WAITING")
                
                @schemas.classproperty
                def SLEEPING(cls):
                    return cls("SLEEPING")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("FAILED")
                
                @schemas.classproperty
                def DELETED(cls):
                    return cls("DELETED")
            isDeleted = schemas.BoolSchema
            isConnectedToAllGates = schemas.BoolSchema
            podStatus = schemas.StrSchema
            __annotations__ = {
                "totalStatus": totalStatus,
                "isDeleted": isDeleted,
                "isConnectedToAllGates": isConnectedToAllGates,
                "podStatus": podStatus,
            }
    
    isDeleted: MetaOapg.properties.isDeleted
    totalStatus: MetaOapg.properties.totalStatus
    isConnectedToAllGates: MetaOapg.properties.isConnectedToAllGates
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalStatus"]) -> MetaOapg.properties.totalStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isDeleted"]) -> MetaOapg.properties.isDeleted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isConnectedToAllGates"]) -> MetaOapg.properties.isConnectedToAllGates: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["podStatus"]) -> MetaOapg.properties.podStatus: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["totalStatus", "isDeleted", "isConnectedToAllGates", "podStatus", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalStatus"]) -> MetaOapg.properties.totalStatus: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isDeleted"]) -> MetaOapg.properties.isDeleted: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isConnectedToAllGates"]) -> MetaOapg.properties.isConnectedToAllGates: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["podStatus"]) -> typing.Union[MetaOapg.properties.podStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["totalStatus", "isDeleted", "isConnectedToAllGates", "podStatus", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        isDeleted: typing.Union[MetaOapg.properties.isDeleted, bool, ],
        totalStatus: typing.Union[MetaOapg.properties.totalStatus, str, ],
        isConnectedToAllGates: typing.Union[MetaOapg.properties.isConnectedToAllGates, bool, ],
        podStatus: typing.Union[MetaOapg.properties.podStatus, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StatusInfo':
        return super().__new__(
            cls,
            *_args,
            isDeleted=isDeleted,
            totalStatus=totalStatus,
            isConnectedToAllGates=isConnectedToAllGates,
            podStatus=podStatus,
            _configuration=_configuration,
            **kwargs,
        )
