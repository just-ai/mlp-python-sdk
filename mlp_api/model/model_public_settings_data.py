# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mlp_api import schemas  # noqa: F401


class ModelPublicSettingsData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            isPublic = schemas.BoolSchema
            availableInJaicp = schemas.BoolSchema
            featured = schemas.BoolSchema
            featuredListOrder = schemas.Int32Schema
            hidden = schemas.BoolSchema
            __annotations__ = {
                "isPublic": isPublic,
                "availableInJaicp": availableInJaicp,
                "featured": featured,
                "featuredListOrder": featuredListOrder,
                "hidden": hidden,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isPublic"]) -> MetaOapg.properties.isPublic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["availableInJaicp"]) -> MetaOapg.properties.availableInJaicp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["featured"]) -> MetaOapg.properties.featured: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["featuredListOrder"]) -> MetaOapg.properties.featuredListOrder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hidden"]) -> MetaOapg.properties.hidden: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["isPublic", "availableInJaicp", "featured", "featuredListOrder", "hidden", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isPublic"]) -> typing.Union[MetaOapg.properties.isPublic, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["availableInJaicp"]) -> typing.Union[MetaOapg.properties.availableInJaicp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["featured"]) -> typing.Union[MetaOapg.properties.featured, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["featuredListOrder"]) -> typing.Union[MetaOapg.properties.featuredListOrder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hidden"]) -> typing.Union[MetaOapg.properties.hidden, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["isPublic", "availableInJaicp", "featured", "featuredListOrder", "hidden", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        isPublic: typing.Union[MetaOapg.properties.isPublic, bool, schemas.Unset] = schemas.unset,
        availableInJaicp: typing.Union[MetaOapg.properties.availableInJaicp, bool, schemas.Unset] = schemas.unset,
        featured: typing.Union[MetaOapg.properties.featured, bool, schemas.Unset] = schemas.unset,
        featuredListOrder: typing.Union[MetaOapg.properties.featuredListOrder, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        hidden: typing.Union[MetaOapg.properties.hidden, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelPublicSettingsData':
        return super().__new__(
            cls,
            *_args,
            isPublic=isPublic,
            availableInJaicp=availableInJaicp,
            featured=featured,
            featuredListOrder=featuredListOrder,
            hidden=hidden,
            _configuration=_configuration,
            **kwargs,
        )
