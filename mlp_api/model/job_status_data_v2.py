# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mlp_api import schemas  # noqa: F401


class JobStatusDataV2(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "jobId",
            "name",
            "parents",
            "status",
        }
        
        class properties:
            jobId = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "IDLE": "IDLE",
                        "RUN": "RUN",
                        "REVERTING": "REVERTING",
                        "COMPLETED": "COMPLETED",
                        "FAILED": "FAILED",
                        "REVERTED": "REVERTED",
                    }
                
                @schemas.classproperty
                def IDLE(cls):
                    return cls("IDLE")
                
                @schemas.classproperty
                def RUN(cls):
                    return cls("RUN")
                
                @schemas.classproperty
                def REVERTING(cls):
                    return cls("REVERTING")
                
                @schemas.classproperty
                def COMPLETED(cls):
                    return cls("COMPLETED")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("FAILED")
                
                @schemas.classproperty
                def REVERTED(cls):
                    return cls("REVERTED")
            name = schemas.StrSchema
            
            
            class parents(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'parents':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            percentage = schemas.Int32Schema
            accountId = schemas.Int64Schema
            groupName = schemas.StrSchema
            serverId = schemas.Int64Schema
            modelId = schemas.Int64Schema
            instanceId = schemas.Int64Schema
            errorMessage = schemas.StrSchema
            __annotations__ = {
                "jobId": jobId,
                "status": status,
                "name": name,
                "parents": parents,
                "percentage": percentage,
                "accountId": accountId,
                "groupName": groupName,
                "serverId": serverId,
                "modelId": modelId,
                "instanceId": instanceId,
                "errorMessage": errorMessage,
            }
    
    jobId: MetaOapg.properties.jobId
    name: MetaOapg.properties.name
    parents: MetaOapg.properties.parents
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobId"]) -> MetaOapg.properties.jobId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parents"]) -> MetaOapg.properties.parents: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["percentage"]) -> MetaOapg.properties.percentage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountId"]) -> MetaOapg.properties.accountId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupName"]) -> MetaOapg.properties.groupName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serverId"]) -> MetaOapg.properties.serverId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelId"]) -> MetaOapg.properties.modelId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instanceId"]) -> MetaOapg.properties.instanceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errorMessage"]) -> MetaOapg.properties.errorMessage: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["jobId", "status", "name", "parents", "percentage", "accountId", "groupName", "serverId", "modelId", "instanceId", "errorMessage", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobId"]) -> MetaOapg.properties.jobId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parents"]) -> MetaOapg.properties.parents: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["percentage"]) -> typing.Union[MetaOapg.properties.percentage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountId"]) -> typing.Union[MetaOapg.properties.accountId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupName"]) -> typing.Union[MetaOapg.properties.groupName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serverId"]) -> typing.Union[MetaOapg.properties.serverId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelId"]) -> typing.Union[MetaOapg.properties.modelId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instanceId"]) -> typing.Union[MetaOapg.properties.instanceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errorMessage"]) -> typing.Union[MetaOapg.properties.errorMessage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["jobId", "status", "name", "parents", "percentage", "accountId", "groupName", "serverId", "modelId", "instanceId", "errorMessage", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        jobId: typing.Union[MetaOapg.properties.jobId, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        parents: typing.Union[MetaOapg.properties.parents, list, tuple, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        percentage: typing.Union[MetaOapg.properties.percentage, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        accountId: typing.Union[MetaOapg.properties.accountId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        groupName: typing.Union[MetaOapg.properties.groupName, str, schemas.Unset] = schemas.unset,
        serverId: typing.Union[MetaOapg.properties.serverId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        modelId: typing.Union[MetaOapg.properties.modelId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        instanceId: typing.Union[MetaOapg.properties.instanceId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        errorMessage: typing.Union[MetaOapg.properties.errorMessage, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JobStatusDataV2':
        return super().__new__(
            cls,
            *_args,
            jobId=jobId,
            name=name,
            parents=parents,
            status=status,
            percentage=percentage,
            accountId=accountId,
            groupName=groupName,
            serverId=serverId,
            modelId=modelId,
            instanceId=instanceId,
            errorMessage=errorMessage,
            _configuration=_configuration,
            **kwargs,
        )
