# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mlp_api import schemas  # noqa: F401


class CreateResourceGroupQuota(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "derivedInstancesLimit",
            "gpuInstancesLimit",
            "accessibleForEveryone",
            "cpuLimit",
            "baseInstancesLimit",
            "memoryLimit",
            "ephemeralDiskLimit",
        }
        
        class properties:
            cpuLimit = schemas.StrSchema
            memoryLimit = schemas.StrSchema
            ephemeralDiskLimit = schemas.StrSchema
            gpuInstancesLimit = schemas.Int32Schema
            baseInstancesLimit = schemas.Int32Schema
            derivedInstancesLimit = schemas.Int32Schema
            accessibleForEveryone = schemas.BoolSchema
            accessibleOnlyForUser = schemas.Int64Schema
            __annotations__ = {
                "cpuLimit": cpuLimit,
                "memoryLimit": memoryLimit,
                "ephemeralDiskLimit": ephemeralDiskLimit,
                "gpuInstancesLimit": gpuInstancesLimit,
                "baseInstancesLimit": baseInstancesLimit,
                "derivedInstancesLimit": derivedInstancesLimit,
                "accessibleForEveryone": accessibleForEveryone,
                "accessibleOnlyForUser": accessibleOnlyForUser,
            }
    
    derivedInstancesLimit: MetaOapg.properties.derivedInstancesLimit
    gpuInstancesLimit: MetaOapg.properties.gpuInstancesLimit
    accessibleForEveryone: MetaOapg.properties.accessibleForEveryone
    cpuLimit: MetaOapg.properties.cpuLimit
    baseInstancesLimit: MetaOapg.properties.baseInstancesLimit
    memoryLimit: MetaOapg.properties.memoryLimit
    ephemeralDiskLimit: MetaOapg.properties.ephemeralDiskLimit
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cpuLimit"]) -> MetaOapg.properties.cpuLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memoryLimit"]) -> MetaOapg.properties.memoryLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ephemeralDiskLimit"]) -> MetaOapg.properties.ephemeralDiskLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gpuInstancesLimit"]) -> MetaOapg.properties.gpuInstancesLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["baseInstancesLimit"]) -> MetaOapg.properties.baseInstancesLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["derivedInstancesLimit"]) -> MetaOapg.properties.derivedInstancesLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accessibleForEveryone"]) -> MetaOapg.properties.accessibleForEveryone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accessibleOnlyForUser"]) -> MetaOapg.properties.accessibleOnlyForUser: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cpuLimit", "memoryLimit", "ephemeralDiskLimit", "gpuInstancesLimit", "baseInstancesLimit", "derivedInstancesLimit", "accessibleForEveryone", "accessibleOnlyForUser", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cpuLimit"]) -> MetaOapg.properties.cpuLimit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memoryLimit"]) -> MetaOapg.properties.memoryLimit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ephemeralDiskLimit"]) -> MetaOapg.properties.ephemeralDiskLimit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gpuInstancesLimit"]) -> MetaOapg.properties.gpuInstancesLimit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["baseInstancesLimit"]) -> MetaOapg.properties.baseInstancesLimit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["derivedInstancesLimit"]) -> MetaOapg.properties.derivedInstancesLimit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accessibleForEveryone"]) -> MetaOapg.properties.accessibleForEveryone: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accessibleOnlyForUser"]) -> typing.Union[MetaOapg.properties.accessibleOnlyForUser, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cpuLimit", "memoryLimit", "ephemeralDiskLimit", "gpuInstancesLimit", "baseInstancesLimit", "derivedInstancesLimit", "accessibleForEveryone", "accessibleOnlyForUser", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        derivedInstancesLimit: typing.Union[MetaOapg.properties.derivedInstancesLimit, decimal.Decimal, int, ],
        gpuInstancesLimit: typing.Union[MetaOapg.properties.gpuInstancesLimit, decimal.Decimal, int, ],
        accessibleForEveryone: typing.Union[MetaOapg.properties.accessibleForEveryone, bool, ],
        cpuLimit: typing.Union[MetaOapg.properties.cpuLimit, str, ],
        baseInstancesLimit: typing.Union[MetaOapg.properties.baseInstancesLimit, decimal.Decimal, int, ],
        memoryLimit: typing.Union[MetaOapg.properties.memoryLimit, str, ],
        ephemeralDiskLimit: typing.Union[MetaOapg.properties.ephemeralDiskLimit, str, ],
        accessibleOnlyForUser: typing.Union[MetaOapg.properties.accessibleOnlyForUser, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateResourceGroupQuota':
        return super().__new__(
            cls,
            *_args,
            derivedInstancesLimit=derivedInstancesLimit,
            gpuInstancesLimit=gpuInstancesLimit,
            accessibleForEveryone=accessibleForEveryone,
            cpuLimit=cpuLimit,
            baseInstancesLimit=baseInstancesLimit,
            memoryLimit=memoryLimit,
            ephemeralDiskLimit=ephemeralDiskLimit,
            accessibleOnlyForUser=accessibleOnlyForUser,
            _configuration=_configuration,
            **kwargs,
        )
