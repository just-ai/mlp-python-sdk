# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mlp_api import schemas  # noqa: F401


class CrossValidationRequestData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "minIntentSizeToDivide",
            "parts",
            "datasetId",
        }
        
        class properties:
            datasetId = schemas.Int64Schema
            parts = schemas.Int32Schema
            minIntentSizeToDivide = schemas.Int32Schema
            baseModelAccountId = schemas.Int64Schema
            baseModelId = schemas.Int64Schema
            targetModelAccountId = schemas.Int64Schema
            targetModelName = schemas.StrSchema
            fitConfig = schemas.DictSchema
            fitConfigId = schemas.Int64Schema
            predictConfig = schemas.DictSchema
            predictConfigId = schemas.Int64Schema
            __annotations__ = {
                "datasetId": datasetId,
                "parts": parts,
                "minIntentSizeToDivide": minIntentSizeToDivide,
                "baseModelAccountId": baseModelAccountId,
                "baseModelId": baseModelId,
                "targetModelAccountId": targetModelAccountId,
                "targetModelName": targetModelName,
                "fitConfig": fitConfig,
                "fitConfigId": fitConfigId,
                "predictConfig": predictConfig,
                "predictConfigId": predictConfigId,
            }
    
    minIntentSizeToDivide: MetaOapg.properties.minIntentSizeToDivide
    parts: MetaOapg.properties.parts
    datasetId: MetaOapg.properties.datasetId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datasetId"]) -> MetaOapg.properties.datasetId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parts"]) -> MetaOapg.properties.parts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minIntentSizeToDivide"]) -> MetaOapg.properties.minIntentSizeToDivide: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["baseModelAccountId"]) -> MetaOapg.properties.baseModelAccountId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["baseModelId"]) -> MetaOapg.properties.baseModelId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetModelAccountId"]) -> MetaOapg.properties.targetModelAccountId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetModelName"]) -> MetaOapg.properties.targetModelName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fitConfig"]) -> MetaOapg.properties.fitConfig: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fitConfigId"]) -> MetaOapg.properties.fitConfigId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["predictConfig"]) -> MetaOapg.properties.predictConfig: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["predictConfigId"]) -> MetaOapg.properties.predictConfigId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["datasetId", "parts", "minIntentSizeToDivide", "baseModelAccountId", "baseModelId", "targetModelAccountId", "targetModelName", "fitConfig", "fitConfigId", "predictConfig", "predictConfigId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datasetId"]) -> MetaOapg.properties.datasetId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parts"]) -> MetaOapg.properties.parts: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minIntentSizeToDivide"]) -> MetaOapg.properties.minIntentSizeToDivide: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["baseModelAccountId"]) -> typing.Union[MetaOapg.properties.baseModelAccountId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["baseModelId"]) -> typing.Union[MetaOapg.properties.baseModelId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetModelAccountId"]) -> typing.Union[MetaOapg.properties.targetModelAccountId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetModelName"]) -> typing.Union[MetaOapg.properties.targetModelName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fitConfig"]) -> typing.Union[MetaOapg.properties.fitConfig, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fitConfigId"]) -> typing.Union[MetaOapg.properties.fitConfigId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["predictConfig"]) -> typing.Union[MetaOapg.properties.predictConfig, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["predictConfigId"]) -> typing.Union[MetaOapg.properties.predictConfigId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["datasetId", "parts", "minIntentSizeToDivide", "baseModelAccountId", "baseModelId", "targetModelAccountId", "targetModelName", "fitConfig", "fitConfigId", "predictConfig", "predictConfigId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        minIntentSizeToDivide: typing.Union[MetaOapg.properties.minIntentSizeToDivide, decimal.Decimal, int, ],
        parts: typing.Union[MetaOapg.properties.parts, decimal.Decimal, int, ],
        datasetId: typing.Union[MetaOapg.properties.datasetId, decimal.Decimal, int, ],
        baseModelAccountId: typing.Union[MetaOapg.properties.baseModelAccountId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        baseModelId: typing.Union[MetaOapg.properties.baseModelId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        targetModelAccountId: typing.Union[MetaOapg.properties.targetModelAccountId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        targetModelName: typing.Union[MetaOapg.properties.targetModelName, str, schemas.Unset] = schemas.unset,
        fitConfig: typing.Union[MetaOapg.properties.fitConfig, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        fitConfigId: typing.Union[MetaOapg.properties.fitConfigId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        predictConfig: typing.Union[MetaOapg.properties.predictConfig, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        predictConfigId: typing.Union[MetaOapg.properties.predictConfigId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CrossValidationRequestData':
        return super().__new__(
            cls,
            *_args,
            minIntentSizeToDivide=minIntentSizeToDivide,
            parts=parts,
            datasetId=datasetId,
            baseModelAccountId=baseModelAccountId,
            baseModelId=baseModelId,
            targetModelAccountId=targetModelAccountId,
            targetModelName=targetModelName,
            fitConfig=fitConfig,
            fitConfigId=fitConfigId,
            predictConfig=predictConfig,
            predictConfigId=predictConfigId,
            _configuration=_configuration,
            **kwargs,
        )
