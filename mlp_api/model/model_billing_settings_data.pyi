# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mlp_api import schemas  # noqa: F401


class ModelBillingSettingsData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "isBillingEnabled",
        }
        
        class properties:
            isBillingEnabled = schemas.BoolSchema
            
            
            class billingUnit(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def CALLS(cls):
                    return cls("calls")
                
                @schemas.classproperty
                def BYTES(cls):
                    return cls("bytes")
                
                @schemas.classproperty
                def CUSTOM(cls):
                    return cls("custom")
            billingUnitPriceInNanoToken = schemas.Int64Schema
            freeUnitQuota = schemas.Int32Schema
            __annotations__ = {
                "isBillingEnabled": isBillingEnabled,
                "billingUnit": billingUnit,
                "billingUnitPriceInNanoToken": billingUnitPriceInNanoToken,
                "freeUnitQuota": freeUnitQuota,
            }
    
    isBillingEnabled: MetaOapg.properties.isBillingEnabled
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isBillingEnabled"]) -> MetaOapg.properties.isBillingEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billingUnit"]) -> MetaOapg.properties.billingUnit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billingUnitPriceInNanoToken"]) -> MetaOapg.properties.billingUnitPriceInNanoToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["freeUnitQuota"]) -> MetaOapg.properties.freeUnitQuota: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["isBillingEnabled", "billingUnit", "billingUnitPriceInNanoToken", "freeUnitQuota", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isBillingEnabled"]) -> MetaOapg.properties.isBillingEnabled: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billingUnit"]) -> typing.Union[MetaOapg.properties.billingUnit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billingUnitPriceInNanoToken"]) -> typing.Union[MetaOapg.properties.billingUnitPriceInNanoToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["freeUnitQuota"]) -> typing.Union[MetaOapg.properties.freeUnitQuota, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["isBillingEnabled", "billingUnit", "billingUnitPriceInNanoToken", "freeUnitQuota", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        isBillingEnabled: typing.Union[MetaOapg.properties.isBillingEnabled, bool, ],
        billingUnit: typing.Union[MetaOapg.properties.billingUnit, str, schemas.Unset] = schemas.unset,
        billingUnitPriceInNanoToken: typing.Union[MetaOapg.properties.billingUnitPriceInNanoToken, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        freeUnitQuota: typing.Union[MetaOapg.properties.freeUnitQuota, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelBillingSettingsData':
        return super().__new__(
            cls,
            *_args,
            isBillingEnabled=isBillingEnabled,
            billingUnit=billingUnit,
            billingUnitPriceInNanoToken=billingUnitPriceInNanoToken,
            freeUnitQuota=freeUnitQuota,
            _configuration=_configuration,
            **kwargs,
        )
