# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mlp_api import schemas  # noqa: F401


class MethodDescriptorData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "output",
            "name",
            "params",
            "fitted",
        }
        
        class properties:
            name = schemas.StrSchema
            
            
            class params(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def additional_properties() -> typing.Type['ParamTypeData']:
                        return ParamTypeData
                
                def __getitem__(self, name: typing.Union[str, ]) -> 'ParamTypeData':
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> 'ParamTypeData':
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: 'ParamTypeData',
                ) -> 'params':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def output() -> typing.Type['ParamTypeData']:
                return ParamTypeData
            fitted = schemas.BoolSchema
            __annotations__ = {
                "name": name,
                "params": params,
                "output": output,
                "fitted": fitted,
            }
    
    output: 'ParamTypeData'
    name: MetaOapg.properties.name
    params: MetaOapg.properties.params
    fitted: MetaOapg.properties.fitted
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["params"]) -> MetaOapg.properties.params: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["output"]) -> 'ParamTypeData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fitted"]) -> MetaOapg.properties.fitted: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "params", "output", "fitted", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["params"]) -> MetaOapg.properties.params: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["output"]) -> 'ParamTypeData': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fitted"]) -> MetaOapg.properties.fitted: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "params", "output", "fitted", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        output: 'ParamTypeData',
        name: typing.Union[MetaOapg.properties.name, str, ],
        params: typing.Union[MetaOapg.properties.params, dict, frozendict.frozendict, ],
        fitted: typing.Union[MetaOapg.properties.fitted, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MethodDescriptorData':
        return super().__new__(
            cls,
            *_args,
            output=output,
            name=name,
            params=params,
            fitted=fitted,
            _configuration=_configuration,
            **kwargs,
        )

from mlp_api.model.param_type_data import ParamTypeData
