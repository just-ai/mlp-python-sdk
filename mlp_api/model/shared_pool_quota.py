# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mlp_api import schemas  # noqa: F401


class SharedPoolQuota(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "groupName",
            "groupType",
            "derivedInstancesLimit",
            "gpuInstancesLimit",
            "cpuLimit",
            "baseInstancesLimit",
            "memoryLimit",
            "accessPolicy",
            "ownerId",
            "ephemeralDiskLimit",
        }
        
        class properties:
            ownerId = schemas.Int64Schema
            groupName = schemas.StrSchema
            
            
            class groupType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "DOCKER": "DOCKER",
                        "KUBERNETES": "KUBERNETES",
                        "HOSTING_SERVER": "HOSTING_SERVER",
                        "SHARED_RESOURCE_QUOTA": "SHARED_RESOURCE_QUOTA",
                    }
                
                @schemas.classproperty
                def DOCKER(cls):
                    return cls("DOCKER")
                
                @schemas.classproperty
                def KUBERNETES(cls):
                    return cls("KUBERNETES")
                
                @schemas.classproperty
                def HOSTING_SERVER(cls):
                    return cls("HOSTING_SERVER")
                
                @schemas.classproperty
                def SHARED_RESOURCE_QUOTA(cls):
                    return cls("SHARED_RESOURCE_QUOTA")
            accessPolicy = schemas.DictSchema
            cpuLimit = schemas.StrSchema
            memoryLimit = schemas.StrSchema
            ephemeralDiskLimit = schemas.StrSchema
            gpuInstancesLimit = schemas.Int32Schema
            baseInstancesLimit = schemas.Int32Schema
            derivedInstancesLimit = schemas.Int32Schema
            __annotations__ = {
                "ownerId": ownerId,
                "groupName": groupName,
                "groupType": groupType,
                "accessPolicy": accessPolicy,
                "cpuLimit": cpuLimit,
                "memoryLimit": memoryLimit,
                "ephemeralDiskLimit": ephemeralDiskLimit,
                "gpuInstancesLimit": gpuInstancesLimit,
                "baseInstancesLimit": baseInstancesLimit,
                "derivedInstancesLimit": derivedInstancesLimit,
            }
    
    groupName: MetaOapg.properties.groupName
    groupType: MetaOapg.properties.groupType
    derivedInstancesLimit: MetaOapg.properties.derivedInstancesLimit
    gpuInstancesLimit: MetaOapg.properties.gpuInstancesLimit
    cpuLimit: MetaOapg.properties.cpuLimit
    baseInstancesLimit: MetaOapg.properties.baseInstancesLimit
    memoryLimit: MetaOapg.properties.memoryLimit
    accessPolicy: MetaOapg.properties.accessPolicy
    ownerId: MetaOapg.properties.ownerId
    ephemeralDiskLimit: MetaOapg.properties.ephemeralDiskLimit
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ownerId"]) -> MetaOapg.properties.ownerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupName"]) -> MetaOapg.properties.groupName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupType"]) -> MetaOapg.properties.groupType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accessPolicy"]) -> MetaOapg.properties.accessPolicy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cpuLimit"]) -> MetaOapg.properties.cpuLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memoryLimit"]) -> MetaOapg.properties.memoryLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ephemeralDiskLimit"]) -> MetaOapg.properties.ephemeralDiskLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gpuInstancesLimit"]) -> MetaOapg.properties.gpuInstancesLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["baseInstancesLimit"]) -> MetaOapg.properties.baseInstancesLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["derivedInstancesLimit"]) -> MetaOapg.properties.derivedInstancesLimit: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ownerId", "groupName", "groupType", "accessPolicy", "cpuLimit", "memoryLimit", "ephemeralDiskLimit", "gpuInstancesLimit", "baseInstancesLimit", "derivedInstancesLimit", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ownerId"]) -> MetaOapg.properties.ownerId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupName"]) -> MetaOapg.properties.groupName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupType"]) -> MetaOapg.properties.groupType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accessPolicy"]) -> MetaOapg.properties.accessPolicy: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cpuLimit"]) -> MetaOapg.properties.cpuLimit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memoryLimit"]) -> MetaOapg.properties.memoryLimit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ephemeralDiskLimit"]) -> MetaOapg.properties.ephemeralDiskLimit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gpuInstancesLimit"]) -> MetaOapg.properties.gpuInstancesLimit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["baseInstancesLimit"]) -> MetaOapg.properties.baseInstancesLimit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["derivedInstancesLimit"]) -> MetaOapg.properties.derivedInstancesLimit: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ownerId", "groupName", "groupType", "accessPolicy", "cpuLimit", "memoryLimit", "ephemeralDiskLimit", "gpuInstancesLimit", "baseInstancesLimit", "derivedInstancesLimit", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        groupName: typing.Union[MetaOapg.properties.groupName, str, ],
        groupType: typing.Union[MetaOapg.properties.groupType, str, ],
        derivedInstancesLimit: typing.Union[MetaOapg.properties.derivedInstancesLimit, decimal.Decimal, int, ],
        gpuInstancesLimit: typing.Union[MetaOapg.properties.gpuInstancesLimit, decimal.Decimal, int, ],
        cpuLimit: typing.Union[MetaOapg.properties.cpuLimit, str, ],
        baseInstancesLimit: typing.Union[MetaOapg.properties.baseInstancesLimit, decimal.Decimal, int, ],
        memoryLimit: typing.Union[MetaOapg.properties.memoryLimit, str, ],
        accessPolicy: typing.Union[MetaOapg.properties.accessPolicy, dict, frozendict.frozendict, ],
        ownerId: typing.Union[MetaOapg.properties.ownerId, decimal.Decimal, int, ],
        ephemeralDiskLimit: typing.Union[MetaOapg.properties.ephemeralDiskLimit, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SharedPoolQuota':
        return super().__new__(
            cls,
            *_args,
            groupName=groupName,
            groupType=groupType,
            derivedInstancesLimit=derivedInstancesLimit,
            gpuInstancesLimit=gpuInstancesLimit,
            cpuLimit=cpuLimit,
            baseInstancesLimit=baseInstancesLimit,
            memoryLimit=memoryLimit,
            accessPolicy=accessPolicy,
            ownerId=ownerId,
            ephemeralDiskLimit=ephemeralDiskLimit,
            _configuration=_configuration,
            **kwargs,
        )
