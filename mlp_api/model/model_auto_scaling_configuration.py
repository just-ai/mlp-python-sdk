# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mlp_api import schemas  # noqa: F401


class ModelAutoScalingConfiguration(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "minInstancesCount",
        }
        
        class properties:
            minInstancesCount = schemas.Int32Schema
            maxInstancesCount = schemas.Int32Schema
            cooldownPeriodMinutes = schemas.Int32Schema
            __annotations__ = {
                "minInstancesCount": minInstancesCount,
                "maxInstancesCount": maxInstancesCount,
                "cooldownPeriodMinutes": cooldownPeriodMinutes,
            }
    
    minInstancesCount: MetaOapg.properties.minInstancesCount
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minInstancesCount"]) -> MetaOapg.properties.minInstancesCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxInstancesCount"]) -> MetaOapg.properties.maxInstancesCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cooldownPeriodMinutes"]) -> MetaOapg.properties.cooldownPeriodMinutes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["minInstancesCount", "maxInstancesCount", "cooldownPeriodMinutes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minInstancesCount"]) -> MetaOapg.properties.minInstancesCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxInstancesCount"]) -> typing.Union[MetaOapg.properties.maxInstancesCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cooldownPeriodMinutes"]) -> typing.Union[MetaOapg.properties.cooldownPeriodMinutes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["minInstancesCount", "maxInstancesCount", "cooldownPeriodMinutes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        minInstancesCount: typing.Union[MetaOapg.properties.minInstancesCount, decimal.Decimal, int, ],
        maxInstancesCount: typing.Union[MetaOapg.properties.maxInstancesCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cooldownPeriodMinutes: typing.Union[MetaOapg.properties.cooldownPeriodMinutes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelAutoScalingConfiguration':
        return super().__new__(
            cls,
            *_args,
            minInstancesCount=minInstancesCount,
            maxInstancesCount=maxInstancesCount,
            cooldownPeriodMinutes=cooldownPeriodMinutes,
            _configuration=_configuration,
            **kwargs,
        )
