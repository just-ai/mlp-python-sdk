# coding: utf-8

"""
    Datatypes specification for GPT task type

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from mlp_api.gpt.models.chat_message import ChatMessage
from mlp_api.gpt.models.tool import Tool
from mlp_api.gpt.models.tool_choice import ToolChoice

class ChatCompletionRequest(BaseModel):
    """
    ChatCompletionRequest
    """
    model: Optional[StrictStr] = None
    messages: conlist(ChatMessage) = Field(...)
    stream: Optional[StrictBool] = None
    tools: Optional[conlist(Tool)] = None
    tool_choice: Optional[ToolChoice] = None
    logprobs: Optional[StrictBool] = None
    top_logprobs: Optional[StrictInt] = None
    __properties = ["model", "messages", "stream", "tools", "tool_choice", "logprobs", "top_logprobs"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ChatCompletionRequest:
        """Create an instance of ChatCompletionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item in self.messages:
                if _item:
                    _items.append(_item.to_dict())
            _dict['messages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tools (list)
        _items = []
        if self.tools:
            for _item in self.tools:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tools'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ChatCompletionRequest:
        """Create an instance of ChatCompletionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ChatCompletionRequest.parse_obj(obj)

        _obj = ChatCompletionRequest.parse_obj({
            "model": obj.get("model"),
            "messages": [ChatMessage.from_dict(_item) for _item in obj.get("messages")] if obj.get("messages") is not None else None,
            "stream": obj.get("stream"),
            "tools": [Tool.from_dict(_item) for _item in obj.get("tools")] if obj.get("tools") is not None else None,
            "tool_choice": obj.get("tool_choice"),
            "logprobs": obj.get("logprobs"),
            "top_logprobs": obj.get("top_logprobs")
        })
        return _obj


