# coding: utf-8

"""
    Datatypes specification for GPT task type

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import conlist
from mlp_api.gpt.models.chat_message import ChatMessage
from mlp_api.gpt.models.chat_role import ChatRole
from mlp_api.gpt.models.content_part import ContentPart
from mlp_api.gpt.models.tool_call import ToolCall

class PartsChatMessage(ChatMessage):
    """
    PartsChatMessage
    """
    content: Optional[conlist(ContentPart)] = None
    __properties = ["role", "content", "tool_call_id", "name", "tool_calls"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PartsChatMessage:
        """Create an instance of PartsChatMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in content (list)
        _items = []
        if self.content:
            for _item in self.content:
                if _item:
                    _items.append(_item.to_dict())
            _dict['content'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tool_calls (list)
        _items = []
        if self.tool_calls:
            for _item in self.tool_calls:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tool_calls'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PartsChatMessage:
        """Create an instance of PartsChatMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PartsChatMessage.parse_obj(obj)

        _obj = PartsChatMessage.parse_obj({
            "role": obj.get("role"),
            "content": [ContentPart.from_dict(_item) for _item in obj.get("content")] if obj.get("content") is not None else None,
            "tool_call_id": obj.get("tool_call_id"),
            "name": obj.get("name"),
            "tool_calls": [ToolCall.from_dict(_item) for _item in obj.get("tool_calls")] if obj.get("tool_calls") is not None else None
        })
        return _obj


