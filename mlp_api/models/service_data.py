# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator
from mlp_api.models.model_info_pk import ModelInfoPK

class ServiceData(BaseModel):
    """
    ServiceData
    """
    id: ModelInfoPK = Field(...)
    name: Optional[StrictStr] = None
    state: StrictStr = Field(...)
    active: StrictInt = Field(...)
    requested: StrictInt = Field(...)
    __properties = ["id", "name", "state", "active", "requested"]

    @validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('RUNNING', 'STARTING', 'INACTIVE', 'SLEEPING'):
            raise ValueError("must be one of enum values ('RUNNING', 'STARTING', 'INACTIVE', 'SLEEPING')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ServiceData:
        """Create an instance of ServiceData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ServiceData:
        """Create an instance of ServiceData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ServiceData.parse_obj(obj)

        _obj = ServiceData.parse_obj({
            "id": ModelInfoPK.from_dict(obj.get("id")) if obj.get("id") is not None else None,
            "name": obj.get("name"),
            "state": obj.get("state"),
            "active": obj.get("active"),
            "requested": obj.get("requested")
        })
        return _obj


