# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator
from mlp_api.models.image_info_pk import ImageInfoPK

class ImageInfoData(BaseModel):
    """
    ImageInfoData
    """
    id: Optional[ImageInfoPK] = None
    name: StrictStr = Field(...)
    image_account_name: Optional[StrictStr] = Field(default=None, alias="imageAccountName")
    image: StrictStr = Field(...)
    access_mode: Optional[StrictStr] = Field(default=None, alias="accessMode")
    __properties = ["id", "name", "imageAccountName", "image", "accessMode"]

    @validator('access_mode')
    def access_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('private', 'public', 'restricted'):
            raise ValueError("must be one of enum values ('private', 'public', 'restricted')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ImageInfoData:
        """Create an instance of ImageInfoData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ImageInfoData:
        """Create an instance of ImageInfoData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ImageInfoData.parse_obj(obj)

        _obj = ImageInfoData.parse_obj({
            "id": ImageInfoPK.from_dict(obj.get("id")) if obj.get("id") is not None else None,
            "name": obj.get("name"),
            "image_account_name": obj.get("imageAccountName"),
            "image": obj.get("image"),
            "access_mode": obj.get("accessMode")
        })
        return _obj


