# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, validator
from mlp_api.models.instances_status_data import InstancesStatusData
from mlp_api.models.job_status_data import JobStatusData

class ModelShortStatusData(BaseModel):
    """
    ModelShortStatusData
    """
    state: StrictStr = Field(...)
    instances: InstancesStatusData = Field(...)
    last_job: Optional[JobStatusData] = Field(default=None, alias="lastJob")
    start_time_seconds: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="startTimeSeconds")
    __properties = ["state", "instances", "lastJob", "startTimeSeconds"]

    @validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('RUNNING', 'STARTING', 'INACTIVE', 'SLEEPING'):
            raise ValueError("must be one of enum values ('RUNNING', 'STARTING', 'INACTIVE', 'SLEEPING')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ModelShortStatusData:
        """Create an instance of ModelShortStatusData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of instances
        if self.instances:
            _dict['instances'] = self.instances.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_job
        if self.last_job:
            _dict['lastJob'] = self.last_job.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ModelShortStatusData:
        """Create an instance of ModelShortStatusData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ModelShortStatusData.parse_obj(obj)

        _obj = ModelShortStatusData.parse_obj({
            "state": obj.get("state"),
            "instances": InstancesStatusData.from_dict(obj.get("instances")) if obj.get("instances") is not None else None,
            "last_job": JobStatusData.from_dict(obj.get("lastJob")) if obj.get("lastJob") is not None else None,
            "start_time_seconds": obj.get("startTimeSeconds")
        })
        return _obj


