# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, validator
from mlp_api.models.server_capacity_data import ServerCapacityData

class CreateUpdateServerTemplateData(BaseModel):
    """
    CreateUpdateServerTemplateData
    """
    name: StrictStr = Field(...)
    type: StrictStr = Field(...)
    capacity: Optional[ServerCapacityData] = None
    description: StrictStr = Field(...)
    raw_configuration: StrictStr = Field(default=..., alias="rawConfiguration")
    tariffication_price: Union[StrictFloat, StrictInt] = Field(default=..., alias="tarifficationPrice")
    tariffication_period: Optional[StrictStr] = Field(default=None, alias="tarifficationPeriod")
    __properties = ["name", "type", "capacity", "description", "rawConfiguration", "tarifficationPrice", "tarifficationPeriod"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('DOCKER', 'KUBERNETES', 'HOSTING_SERVER', 'SHARED_RESOURCE_QUOTA'):
            raise ValueError("must be one of enum values ('DOCKER', 'KUBERNETES', 'HOSTING_SERVER', 'SHARED_RESOURCE_QUOTA')")
        return value

    @validator('tariffication_period')
    def tariffication_period_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('SECOND', 'MINUTE', 'HOUR', 'DAY', 'MONTH', 'YEAR'):
            raise ValueError("must be one of enum values ('SECOND', 'MINUTE', 'HOUR', 'DAY', 'MONTH', 'YEAR')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateUpdateServerTemplateData:
        """Create an instance of CreateUpdateServerTemplateData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of capacity
        if self.capacity:
            _dict['capacity'] = self.capacity.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateUpdateServerTemplateData:
        """Create an instance of CreateUpdateServerTemplateData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateUpdateServerTemplateData.parse_obj(obj)

        _obj = CreateUpdateServerTemplateData.parse_obj({
            "name": obj.get("name"),
            "type": obj.get("type"),
            "capacity": ServerCapacityData.from_dict(obj.get("capacity")) if obj.get("capacity") is not None else None,
            "description": obj.get("description"),
            "raw_configuration": obj.get("rawConfiguration"),
            "tariffication_price": obj.get("tarifficationPrice"),
            "tariffication_period": obj.get("tarifficationPeriod")
        })
        return _obj


