# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class CrossValidationRequestData(BaseModel):
    """
    CrossValidationRequestData
    """
    base_model_account_id: Optional[StrictInt] = Field(default=None, alias="baseModelAccountId")
    base_model_id: Optional[StrictInt] = Field(default=None, alias="baseModelId")
    target_model_account_id: Optional[StrictInt] = Field(default=None, alias="targetModelAccountId")
    target_model_name: Optional[StrictStr] = Field(default=None, alias="targetModelName")
    fit_config: Optional[Dict[str, Any]] = Field(default=None, alias="fitConfig")
    fit_config_id: Optional[StrictInt] = Field(default=None, alias="fitConfigId")
    dataset_id: StrictInt = Field(default=..., alias="datasetId")
    predict_config: Optional[Dict[str, Any]] = Field(default=None, alias="predictConfig")
    predict_config_id: Optional[StrictInt] = Field(default=None, alias="predictConfigId")
    parts: StrictInt = Field(...)
    min_intent_size_to_divide: StrictInt = Field(default=..., alias="minIntentSizeToDivide")
    __properties = ["baseModelAccountId", "baseModelId", "targetModelAccountId", "targetModelName", "fitConfig", "fitConfigId", "datasetId", "predictConfig", "predictConfigId", "parts", "minIntentSizeToDivide"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CrossValidationRequestData:
        """Create an instance of CrossValidationRequestData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CrossValidationRequestData:
        """Create an instance of CrossValidationRequestData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CrossValidationRequestData.parse_obj(obj)

        _obj = CrossValidationRequestData.parse_obj({
            "base_model_account_id": obj.get("baseModelAccountId"),
            "base_model_id": obj.get("baseModelId"),
            "target_model_account_id": obj.get("targetModelAccountId"),
            "target_model_name": obj.get("targetModelName"),
            "fit_config": obj.get("fitConfig"),
            "fit_config_id": obj.get("fitConfigId"),
            "dataset_id": obj.get("datasetId"),
            "predict_config": obj.get("predictConfig"),
            "predict_config_id": obj.get("predictConfigId"),
            "parts": obj.get("parts"),
            "min_intent_size_to_divide": obj.get("minIntentSizeToDivide")
        })
        return _obj


