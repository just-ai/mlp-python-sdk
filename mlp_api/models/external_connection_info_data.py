# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from mlp_api.models.model_instance_pk import ModelInstancePK

class ExternalConnectionInfoData(BaseModel):
    """
    ExternalConnectionInfoData
    """
    id: ModelInstancePK = Field(...)
    connected: StrictBool = Field(...)
    docker_run_command: Optional[StrictStr] = Field(default=None, alias="dockerRunCommand")
    docker_compose_content: Optional[StrictStr] = Field(default=None, alias="dockerComposeContent")
    env_variables: Dict[str, StrictStr] = Field(default=..., alias="envVariables")
    hostname: Optional[StrictStr] = None
    version: Optional[StrictInt] = None
    image_name: Optional[StrictStr] = Field(default=None, alias="imageName")
    __properties = ["id", "connected", "dockerRunCommand", "dockerComposeContent", "envVariables", "hostname", "version", "imageName"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExternalConnectionInfoData:
        """Create an instance of ExternalConnectionInfoData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExternalConnectionInfoData:
        """Create an instance of ExternalConnectionInfoData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExternalConnectionInfoData.parse_obj(obj)

        _obj = ExternalConnectionInfoData.parse_obj({
            "id": ModelInstancePK.from_dict(obj.get("id")) if obj.get("id") is not None else None,
            "connected": obj.get("connected"),
            "docker_run_command": obj.get("dockerRunCommand"),
            "docker_compose_content": obj.get("dockerComposeContent"),
            "env_variables": obj.get("envVariables"),
            "hostname": obj.get("hostname"),
            "version": obj.get("version"),
            "image_name": obj.get("imageName")
        })
        return _obj


