# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, validator
from mlp_api.models.data_image_mount_data import DataImageMountData
from mlp_api.models.model_batches_data import ModelBatchesData
from mlp_api.models.model_limits_data import ModelLimitsData
from mlp_api.models.model_retries_data import ModelRetriesData
from mlp_api.models.model_timeouts_data import ModelTimeoutsData
from mlp_api.models.persistent_volume_data import PersistentVolumeData

class ModelCreateUpdateData(BaseModel):
    """
    ModelCreateUpdateData
    """
    model_name: StrictStr = Field(..., alias="modelName")
    image_account_id: Optional[StrictInt] = Field(None, alias="imageAccountId")
    image_id: Optional[StrictInt] = Field(None, alias="imageId")
    training_model_account_id: Optional[StrictInt] = Field(None, alias="trainingModelAccountId")
    training_model_id: Optional[StrictInt] = Field(None, alias="trainingModelId")
    training_type: Optional[StrictStr] = Field(None, alias="trainingType")
    training_dataset_account_id: Optional[StrictInt] = Field(None, alias="trainingDatasetAccountId")
    training_dataset_id: Optional[StrictInt] = Field(None, alias="trainingDatasetId")
    training_fit_config_id: Optional[StrictInt] = Field(None, alias="trainingFitConfigId")
    task_type: Optional[StrictStr] = Field(None, alias="taskType")
    training_dataset_type: Optional[StrictStr] = Field(None, alias="trainingDatasetType")
    fit_template_model_id: Optional[StrictInt] = Field(None, alias="fitTemplateModelId")
    composite: Optional[StrictBool] = None
    config: Optional[StrictStr] = None
    env: Optional[StrictStr] = None
    fittable: Optional[StrictBool] = None
    hosting_type: Optional[StrictStr] = Field(None, alias="hostingType")
    persistent_volumes: Optional[conlist(PersistentVolumeData)] = Field(None, alias="persistentVolumes")
    data_image_mounts: Optional[conlist(DataImageMountData)] = Field(None, alias="dataImageMounts")
    resource_group: Optional[StrictStr] = Field(None, alias="resourceGroup")
    timeouts: Optional[ModelTimeoutsData] = None
    resource_limits: Optional[ModelLimitsData] = Field(None, alias="resourceLimits")
    retries_config: Optional[ModelRetriesData] = Field(None, alias="retriesConfig")
    batches_config: Optional[ModelBatchesData] = Field(None, alias="batchesConfig")
    short_description: Optional[StrictStr] = Field(None, alias="shortDescription")
    languages: Optional[conlist(StrictStr, unique_items=True)] = None
    min_instances_count: Optional[StrictInt] = Field(None, alias="minInstancesCount")
    __properties = ["modelName", "imageAccountId", "imageId", "trainingModelAccountId", "trainingModelId", "trainingType", "trainingDatasetAccountId", "trainingDatasetId", "trainingFitConfigId", "taskType", "trainingDatasetType", "fitTemplateModelId", "composite", "config", "env", "fittable", "hostingType", "persistentVolumes", "dataImageMounts", "resourceGroup", "timeouts", "resourceLimits", "retriesConfig", "batchesConfig", "shortDescription", "languages", "minInstancesCount"]

    @validator('training_type')
    def training_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('singleContainer', 'multipleFit'):
            raise ValueError("must be one of enum values ('singleContainer', 'multipleFit')")
        return value

    @validator('hosting_type')
    def hosting_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('EXTERNAL', 'INTERNAL'):
            raise ValueError("must be one of enum values ('EXTERNAL', 'INTERNAL')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ModelCreateUpdateData:
        """Create an instance of ModelCreateUpdateData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in persistent_volumes (list)
        _items = []
        if self.persistent_volumes:
            for _item in self.persistent_volumes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['persistentVolumes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in data_image_mounts (list)
        _items = []
        if self.data_image_mounts:
            for _item in self.data_image_mounts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dataImageMounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of timeouts
        if self.timeouts:
            _dict['timeouts'] = self.timeouts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_limits
        if self.resource_limits:
            _dict['resourceLimits'] = self.resource_limits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of retries_config
        if self.retries_config:
            _dict['retriesConfig'] = self.retries_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of batches_config
        if self.batches_config:
            _dict['batchesConfig'] = self.batches_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ModelCreateUpdateData:
        """Create an instance of ModelCreateUpdateData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ModelCreateUpdateData.parse_obj(obj)

        _obj = ModelCreateUpdateData.parse_obj({
            "model_name": obj.get("modelName"),
            "image_account_id": obj.get("imageAccountId"),
            "image_id": obj.get("imageId"),
            "training_model_account_id": obj.get("trainingModelAccountId"),
            "training_model_id": obj.get("trainingModelId"),
            "training_type": obj.get("trainingType"),
            "training_dataset_account_id": obj.get("trainingDatasetAccountId"),
            "training_dataset_id": obj.get("trainingDatasetId"),
            "training_fit_config_id": obj.get("trainingFitConfigId"),
            "task_type": obj.get("taskType"),
            "training_dataset_type": obj.get("trainingDatasetType"),
            "fit_template_model_id": obj.get("fitTemplateModelId"),
            "composite": obj.get("composite"),
            "config": obj.get("config"),
            "env": obj.get("env"),
            "fittable": obj.get("fittable"),
            "hosting_type": obj.get("hostingType"),
            "persistent_volumes": [PersistentVolumeData.from_dict(_item) for _item in obj.get("persistentVolumes")] if obj.get("persistentVolumes") is not None else None,
            "data_image_mounts": [DataImageMountData.from_dict(_item) for _item in obj.get("dataImageMounts")] if obj.get("dataImageMounts") is not None else None,
            "resource_group": obj.get("resourceGroup"),
            "timeouts": ModelTimeoutsData.from_dict(obj.get("timeouts")) if obj.get("timeouts") is not None else None,
            "resource_limits": ModelLimitsData.from_dict(obj.get("resourceLimits")) if obj.get("resourceLimits") is not None else None,
            "retries_config": ModelRetriesData.from_dict(obj.get("retriesConfig")) if obj.get("retriesConfig") is not None else None,
            "batches_config": ModelBatchesData.from_dict(obj.get("batchesConfig")) if obj.get("batchesConfig") is not None else None,
            "short_description": obj.get("shortDescription"),
            "languages": obj.get("languages"),
            "min_instances_count": obj.get("minInstancesCount")
        })
        return _obj

