# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictStr, validator
from mlp_api.models.account_limits_data import AccountLimitsData

class AccountConfigDump(BaseModel):
    """
    AccountConfigDump
    """
    account_name: StrictStr = Field(..., alias="accountName")
    account_limits: Optional[AccountLimitsData] = Field(None, alias="accountLimits")
    language: Optional[StrictStr] = None
    tags: Optional[Dict[str, StrictStr]] = None
    account_display_name: Optional[StrictStr] = Field(None, alias="accountDisplayName")
    __properties = ["accountName", "accountLimits", "language", "tags", "accountDisplayName"]

    @validator('language')
    def language_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('RU', 'EN'):
            raise ValueError("must be one of enum values ('RU', 'EN')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccountConfigDump:
        """Create an instance of AccountConfigDump from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of account_limits
        if self.account_limits:
            _dict['accountLimits'] = self.account_limits.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccountConfigDump:
        """Create an instance of AccountConfigDump from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AccountConfigDump.parse_obj(obj)

        _obj = AccountConfigDump.parse_obj({
            "account_name": obj.get("accountName"),
            "account_limits": AccountLimitsData.from_dict(obj.get("accountLimits")) if obj.get("accountLimits") is not None else None,
            "language": obj.get("language"),
            "tags": obj.get("tags"),
            "account_display_name": obj.get("accountDisplayName")
        })
        return _obj

