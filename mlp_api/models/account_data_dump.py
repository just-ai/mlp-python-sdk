# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from mlp_api.models.data_image_dump import DataImageDump
from mlp_api.models.image_dump import ImageDump
from mlp_api.models.model_dump import ModelDump
from mlp_api.models.model_group_dump import ModelGroupDump

class AccountDataDump(BaseModel):
    """
    AccountDataDump
    """
    images: Optional[conlist(ImageDump)] = None
    models: Optional[conlist(ModelDump)] = None
    api_tokens: Optional[conlist(StrictStr)] = Field(None, alias="apiTokens")
    data_images: Optional[conlist(DataImageDump)] = Field(None, alias="dataImages")
    model_groups: Optional[conlist(ModelGroupDump)] = Field(None, alias="modelGroups")
    __properties = ["images", "models", "apiTokens", "dataImages", "modelGroups"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccountDataDump:
        """Create an instance of AccountDataDump from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item in self.images:
                if _item:
                    _items.append(_item.to_dict())
            _dict['images'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in models (list)
        _items = []
        if self.models:
            for _item in self.models:
                if _item:
                    _items.append(_item.to_dict())
            _dict['models'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in data_images (list)
        _items = []
        if self.data_images:
            for _item in self.data_images:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dataImages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in model_groups (list)
        _items = []
        if self.model_groups:
            for _item in self.model_groups:
                if _item:
                    _items.append(_item.to_dict())
            _dict['modelGroups'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccountDataDump:
        """Create an instance of AccountDataDump from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AccountDataDump.parse_obj(obj)

        _obj = AccountDataDump.parse_obj({
            "images": [ImageDump.from_dict(_item) for _item in obj.get("images")] if obj.get("images") is not None else None,
            "models": [ModelDump.from_dict(_item) for _item in obj.get("models")] if obj.get("models") is not None else None,
            "api_tokens": obj.get("apiTokens"),
            "data_images": [DataImageDump.from_dict(_item) for _item in obj.get("dataImages")] if obj.get("dataImages") is not None else None,
            "model_groups": [ModelGroupDump.from_dict(_item) for _item in obj.get("modelGroups")] if obj.get("modelGroups") is not None else None
        })
        return _obj

