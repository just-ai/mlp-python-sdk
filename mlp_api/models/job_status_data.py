# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class JobStatusData(BaseModel):
    """
    JobStatusData
    """
    account_id: StrictInt = Field(default=..., alias="accountId")
    job_id: StrictInt = Field(default=..., alias="jobId")
    job_type: StrictStr = Field(default=..., alias="jobType")
    state: StrictStr = Field(...)
    done: StrictBool = Field(...)
    error: Optional[StrictBool] = None
    error_message: Optional[StrictStr] = Field(default=None, alias="errorMessage")
    __properties = ["accountId", "jobId", "jobType", "state", "done", "error", "errorMessage"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> JobStatusData:
        """Create an instance of JobStatusData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> JobStatusData:
        """Create an instance of JobStatusData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return JobStatusData.parse_obj(obj)

        _obj = JobStatusData.parse_obj({
            "account_id": obj.get("accountId"),
            "job_id": obj.get("jobId"),
            "job_type": obj.get("jobType"),
            "state": obj.get("state"),
            "done": obj.get("done"),
            "error": obj.get("error"),
            "error_message": obj.get("errorMessage")
        })
        return _obj


