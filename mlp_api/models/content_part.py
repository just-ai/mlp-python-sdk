# coding: utf-8

"""
    Datatypes specification for GPT task type

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import BaseModel, Field
from mlp_api.models.content_part_type import ContentPartType

from typing import TYPE_CHECKING
from importlib import import_module
if TYPE_CHECKING:
    from mlp_api.models.image_content_part import ImageContentPart
    from mlp_api.models.text_content_part import TextContentPart

class ContentPart(BaseModel):
    """
    ContentPart
    """
    type: ContentPartType = Field(...)
    __properties = ["type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    # JSON field name that stores the object type
    __discriminator_property_name = 'type'

    # discriminator mappings
    __discriminator_value_class_map = {
        'image_url': 'ImageContentPart',
        'text': 'TextContentPart'
    }

    @classmethod
    def get_discriminator_value(cls, obj: dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Union(ImageContentPart, TextContentPart):
        """Create an instance of ContentPart from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Union(ImageContentPart, TextContentPart):
        """Create an instance of ContentPart from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'ImageContentPart':
            return import_module("mlp_api.models.image_content_part").ImageContentPart.from_dict(obj)
        if object_type ==  'TextContentPart':
            return import_module("mlp_api.models.text_content_part").TextContentPart.from_dict(obj)
        raise ValueError("ContentPart failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))


