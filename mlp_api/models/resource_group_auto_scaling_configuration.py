# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist

class ResourceGroupAutoScalingConfiguration(BaseModel):
    """
    ResourceGroupAutoScalingConfiguration
    """
    server_id: Optional[StrictInt] = Field(default=None, alias="serverId")
    server_configuration: Optional[StrictStr] = Field(default=None, alias="serverConfiguration")
    fallback_servers_ids: Optional[conlist(StrictInt)] = Field(default=None, alias="fallbackServersIds")
    min_servers_count: StrictInt = Field(default=..., alias="minServersCount")
    max_servers_count: Optional[StrictInt] = Field(default=None, alias="maxServersCount")
    cooldown_period_minutes: Optional[StrictInt] = Field(default=None, alias="cooldownPeriodMinutes")
    __properties = ["serverId", "serverConfiguration", "fallbackServersIds", "minServersCount", "maxServersCount", "cooldownPeriodMinutes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ResourceGroupAutoScalingConfiguration:
        """Create an instance of ResourceGroupAutoScalingConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ResourceGroupAutoScalingConfiguration:
        """Create an instance of ResourceGroupAutoScalingConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ResourceGroupAutoScalingConfiguration.parse_obj(obj)

        _obj = ResourceGroupAutoScalingConfiguration.parse_obj({
            "server_id": obj.get("serverId"),
            "server_configuration": obj.get("serverConfiguration"),
            "fallback_servers_ids": obj.get("fallbackServersIds"),
            "min_servers_count": obj.get("minServersCount"),
            "max_servers_count": obj.get("maxServersCount"),
            "cooldown_period_minutes": obj.get("cooldownPeriodMinutes")
        })
        return _obj


