# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt

class ModelMetricsData(BaseModel):
    """
    ModelMetricsData
    """
    model_id: StrictInt = Field(default=..., alias="modelId")
    total_success: StrictInt = Field(default=..., alias="totalSuccess")
    total_fail: StrictInt = Field(default=..., alias="totalFail")
    fail_percentage: Union[StrictFloat, StrictInt] = Field(default=..., alias="failPercentage")
    __properties = ["modelId", "totalSuccess", "totalFail", "failPercentage"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ModelMetricsData:
        """Create an instance of ModelMetricsData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ModelMetricsData:
        """Create an instance of ModelMetricsData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ModelMetricsData.parse_obj(obj)

        _obj = ModelMetricsData.parse_obj({
            "model_id": obj.get("modelId"),
            "total_success": obj.get("totalSuccess"),
            "total_fail": obj.get("totalFail"),
            "fail_percentage": obj.get("failPercentage")
        })
        return _obj


