# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt

class ModelStartTimeData(BaseModel):
    """
    ModelStartTimeData
    """
    model_id: StrictInt = Field(default=..., alias="modelId")
    instance_id: StrictInt = Field(default=..., alias="instanceId")
    model_average_start_time_sec: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="modelAverageStartTimeSec")
    instance_start_time: datetime = Field(default=..., alias="instanceStartTime")
    instance_started_time: Optional[datetime] = Field(default=None, alias="instanceStartedTime")
    instance_error_time: Optional[datetime] = Field(default=None, alias="instanceErrorTime")
    __properties = ["modelId", "instanceId", "modelAverageStartTimeSec", "instanceStartTime", "instanceStartedTime", "instanceErrorTime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ModelStartTimeData:
        """Create an instance of ModelStartTimeData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ModelStartTimeData:
        """Create an instance of ModelStartTimeData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ModelStartTimeData.parse_obj(obj)

        _obj = ModelStartTimeData.parse_obj({
            "model_id": obj.get("modelId"),
            "instance_id": obj.get("instanceId"),
            "model_average_start_time_sec": obj.get("modelAverageStartTimeSec"),
            "instance_start_time": obj.get("instanceStartTime"),
            "instance_started_time": obj.get("instanceStartedTime"),
            "instance_error_time": obj.get("instanceErrorTime")
        })
        return _obj


