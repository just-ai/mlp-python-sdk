# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist

class ResourceGroupCapacity(BaseModel):
    """
    ResourceGroupCapacity
    """
    milli_cpu: StrictInt = Field(default=..., alias="milliCpu")
    ram_mb: StrictInt = Field(default=..., alias="ramMb")
    disk_mb: StrictInt = Field(default=..., alias="diskMb")
    gpu: StrictInt = Field(...)
    gpu_models: conlist(StrictStr, unique_items=True) = Field(default=..., alias="gpuModels")
    v_ram_mb: Optional[StrictInt] = Field(default=None, alias="vRamMb")
    nodes: conlist(StrictStr, unique_items=True) = Field(...)
    vram_mb: StrictInt = Field(default=..., alias="vramMb")
    __properties = ["milliCpu", "ramMb", "diskMb", "gpu", "gpuModels", "vRamMb", "nodes", "vramMb"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ResourceGroupCapacity:
        """Create an instance of ResourceGroupCapacity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ResourceGroupCapacity:
        """Create an instance of ResourceGroupCapacity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ResourceGroupCapacity.parse_obj(obj)

        _obj = ResourceGroupCapacity.parse_obj({
            "milli_cpu": obj.get("milliCpu"),
            "ram_mb": obj.get("ramMb"),
            "disk_mb": obj.get("diskMb"),
            "gpu": obj.get("gpu"),
            "gpu_models": obj.get("gpuModels"),
            "v_ram_mb": obj.get("vRamMb"),
            "nodes": obj.get("nodes"),
            "vram_mb": obj.get("vramMb")
        })
        return _obj


