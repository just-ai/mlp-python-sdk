# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist, validator

class ShortJobView(BaseModel):
    """
    ShortJobView
    """
    job_id: StrictStr = Field(default=..., alias="jobId")
    title: StrictStr = Field(...)
    children: conlist(ShortJobView) = Field(...)
    percentage: Union[StrictFloat, StrictInt] = Field(...)
    view_status: StrictStr = Field(default=..., alias="viewStatus")
    current_step: StrictStr = Field(default=..., alias="currentStep")
    __properties = ["jobId", "title", "children", "percentage", "viewStatus", "currentStep"]

    @validator('view_status')
    def view_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('IDLE', 'RUN', 'REVERTING', 'COMPLETED', 'FAILED', 'REVERTED'):
            raise ValueError("must be one of enum values ('IDLE', 'RUN', 'REVERTING', 'COMPLETED', 'FAILED', 'REVERTED')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ShortJobView:
        """Create an instance of ShortJobView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item in self.children:
                if _item:
                    _items.append(_item.to_dict())
            _dict['children'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ShortJobView:
        """Create an instance of ShortJobView from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ShortJobView.parse_obj(obj)

        _obj = ShortJobView.parse_obj({
            "job_id": obj.get("jobId"),
            "title": obj.get("title"),
            "children": [ShortJobView.from_dict(_item) for _item in obj.get("children")] if obj.get("children") is not None else None,
            "percentage": obj.get("percentage"),
            "view_status": obj.get("viewStatus"),
            "current_step": obj.get("currentStep")
        })
        return _obj

ShortJobView.update_forward_refs()

