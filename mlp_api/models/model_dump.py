# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, validator
from mlp_api.models.data_image_mount_dump import DataImageMountDump
from mlp_api.models.document_dump import DocumentDump
from mlp_api.models.fit_config_dump import FitConfigDump
from mlp_api.models.model_batches_data import ModelBatchesData
from mlp_api.models.model_limits_data import ModelLimitsData
from mlp_api.models.model_public_settings_data import ModelPublicSettingsData
from mlp_api.models.model_retries_data import ModelRetriesData
from mlp_api.models.model_timeouts_data import ModelTimeoutsData
from mlp_api.models.predict_config_dump import PredictConfigDump

class ModelDump(BaseModel):
    """
    ModelDump
    """
    name: StrictStr = Field(...)
    image_account: Optional[StrictStr] = Field(None, alias="imageAccount")
    image: StrictStr = Field(...)
    model_group: Optional[StrictStr] = Field(None, alias="modelGroup")
    is_public: Optional[StrictBool] = Field(None, alias="isPublic")
    config: Optional[Dict[str, Any]] = None
    env: Optional[Dict[str, Any]] = None
    training_model_account: Optional[StrictStr] = Field(None, alias="trainingModelAccount")
    training_model_name: Optional[StrictStr] = Field(None, alias="trainingModelName")
    training_dataset_account: Optional[StrictStr] = Field(None, alias="trainingDatasetAccount")
    training_dataset_name: Optional[StrictStr] = Field(None, alias="trainingDatasetName")
    training_fit_config_name: Optional[StrictStr] = Field(None, alias="trainingFitConfigName")
    task_type: Optional[StrictStr] = Field(None, alias="taskType")
    training_dataset_type: Optional[StrictStr] = Field(None, alias="trainingDatasetType")
    fit_template_model_name: Optional[StrictStr] = Field(None, alias="fitTemplateModelName")
    composite: Optional[StrictBool] = None
    fittable: Optional[StrictBool] = None
    training_type: Optional[StrictStr] = Field(None, alias="trainingType")
    hosting_type: Optional[StrictStr] = Field(None, alias="hostingType")
    data_image_mounts: Optional[conlist(DataImageMountDump)] = Field(None, alias="dataImageMounts")
    timeouts: Optional[ModelTimeoutsData] = None
    limits: Optional[ModelLimitsData] = None
    retries: Optional[ModelRetriesData] = None
    batches: Optional[ModelBatchesData] = None
    docs: conlist(DocumentDump) = Field(...)
    predict_configs: conlist(PredictConfigDump) = Field(..., alias="predictConfigs")
    fit_configs: conlist(FitConfigDump) = Field(..., alias="fitConfigs")
    resource_group: Optional[StrictStr] = Field(None, alias="resourceGroup")
    short_description: Optional[StrictStr] = Field(None, alias="shortDescription")
    languages: Optional[conlist(StrictStr, unique_items=True)] = None
    available_in_jaicp: Optional[StrictBool] = Field(None, alias="availableInJaicp")
    featured: Optional[StrictBool] = None
    featured_list_order: Optional[StrictInt] = Field(None, alias="featuredListOrder")
    min_instances_count: Optional[StrictInt] = Field(None, alias="minInstancesCount")
    hidden: Optional[StrictBool] = None
    as_public_settings_data: ModelPublicSettingsData = Field(..., alias="asPublicSettingsData")
    __properties = ["name", "imageAccount", "image", "modelGroup", "isPublic", "config", "env", "trainingModelAccount", "trainingModelName", "trainingDatasetAccount", "trainingDatasetName", "trainingFitConfigName", "taskType", "trainingDatasetType", "fitTemplateModelName", "composite", "fittable", "trainingType", "hostingType", "dataImageMounts", "timeouts", "limits", "retries", "batches", "docs", "predictConfigs", "fitConfigs", "resourceGroup", "shortDescription", "languages", "availableInJaicp", "featured", "featuredListOrder", "minInstancesCount", "hidden", "asPublicSettingsData"]

    @validator('training_type')
    def training_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('singleContainer', 'multipleFit'):
            raise ValueError("must be one of enum values ('singleContainer', 'multipleFit')")
        return value

    @validator('hosting_type')
    def hosting_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('EXTERNAL', 'INTERNAL'):
            raise ValueError("must be one of enum values ('EXTERNAL', 'INTERNAL')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ModelDump:
        """Create an instance of ModelDump from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in data_image_mounts (list)
        _items = []
        if self.data_image_mounts:
            for _item in self.data_image_mounts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dataImageMounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of timeouts
        if self.timeouts:
            _dict['timeouts'] = self.timeouts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of limits
        if self.limits:
            _dict['limits'] = self.limits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of retries
        if self.retries:
            _dict['retries'] = self.retries.to_dict()
        # override the default output from pydantic by calling `to_dict()` of batches
        if self.batches:
            _dict['batches'] = self.batches.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in docs (list)
        _items = []
        if self.docs:
            for _item in self.docs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['docs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in predict_configs (list)
        _items = []
        if self.predict_configs:
            for _item in self.predict_configs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['predictConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fit_configs (list)
        _items = []
        if self.fit_configs:
            for _item in self.fit_configs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['fitConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of as_public_settings_data
        if self.as_public_settings_data:
            _dict['asPublicSettingsData'] = self.as_public_settings_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ModelDump:
        """Create an instance of ModelDump from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ModelDump.parse_obj(obj)

        _obj = ModelDump.parse_obj({
            "name": obj.get("name"),
            "image_account": obj.get("imageAccount"),
            "image": obj.get("image"),
            "model_group": obj.get("modelGroup"),
            "is_public": obj.get("isPublic"),
            "config": obj.get("config"),
            "env": obj.get("env"),
            "training_model_account": obj.get("trainingModelAccount"),
            "training_model_name": obj.get("trainingModelName"),
            "training_dataset_account": obj.get("trainingDatasetAccount"),
            "training_dataset_name": obj.get("trainingDatasetName"),
            "training_fit_config_name": obj.get("trainingFitConfigName"),
            "task_type": obj.get("taskType"),
            "training_dataset_type": obj.get("trainingDatasetType"),
            "fit_template_model_name": obj.get("fitTemplateModelName"),
            "composite": obj.get("composite"),
            "fittable": obj.get("fittable"),
            "training_type": obj.get("trainingType"),
            "hosting_type": obj.get("hostingType"),
            "data_image_mounts": [DataImageMountDump.from_dict(_item) for _item in obj.get("dataImageMounts")] if obj.get("dataImageMounts") is not None else None,
            "timeouts": ModelTimeoutsData.from_dict(obj.get("timeouts")) if obj.get("timeouts") is not None else None,
            "limits": ModelLimitsData.from_dict(obj.get("limits")) if obj.get("limits") is not None else None,
            "retries": ModelRetriesData.from_dict(obj.get("retries")) if obj.get("retries") is not None else None,
            "batches": ModelBatchesData.from_dict(obj.get("batches")) if obj.get("batches") is not None else None,
            "docs": [DocumentDump.from_dict(_item) for _item in obj.get("docs")] if obj.get("docs") is not None else None,
            "predict_configs": [PredictConfigDump.from_dict(_item) for _item in obj.get("predictConfigs")] if obj.get("predictConfigs") is not None else None,
            "fit_configs": [FitConfigDump.from_dict(_item) for _item in obj.get("fitConfigs")] if obj.get("fitConfigs") is not None else None,
            "resource_group": obj.get("resourceGroup"),
            "short_description": obj.get("shortDescription"),
            "languages": obj.get("languages"),
            "available_in_jaicp": obj.get("availableInJaicp"),
            "featured": obj.get("featured"),
            "featured_list_order": obj.get("featuredListOrder"),
            "min_instances_count": obj.get("minInstancesCount"),
            "hidden": obj.get("hidden"),
            "as_public_settings_data": ModelPublicSettingsData.from_dict(obj.get("asPublicSettingsData")) if obj.get("asPublicSettingsData") is not None else None
        })
        return _obj

