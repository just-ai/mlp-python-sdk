# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class DifferenceIAccountDataDumpErrorsInnerCauseStackTraceInner(BaseModel):
    """
    DifferenceIAccountDataDumpErrorsInnerCauseStackTraceInner
    """
    class_loader_name: Optional[StrictStr] = Field(default=None, alias="classLoaderName")
    module_name: Optional[StrictStr] = Field(default=None, alias="moduleName")
    module_version: Optional[StrictStr] = Field(default=None, alias="moduleVersion")
    method_name: Optional[StrictStr] = Field(default=None, alias="methodName")
    file_name: Optional[StrictStr] = Field(default=None, alias="fileName")
    line_number: Optional[StrictInt] = Field(default=None, alias="lineNumber")
    class_name: Optional[StrictStr] = Field(default=None, alias="className")
    native_method: Optional[StrictBool] = Field(default=None, alias="nativeMethod")
    __properties = ["classLoaderName", "moduleName", "moduleVersion", "methodName", "fileName", "lineNumber", "className", "nativeMethod"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DifferenceIAccountDataDumpErrorsInnerCauseStackTraceInner:
        """Create an instance of DifferenceIAccountDataDumpErrorsInnerCauseStackTraceInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DifferenceIAccountDataDumpErrorsInnerCauseStackTraceInner:
        """Create an instance of DifferenceIAccountDataDumpErrorsInnerCauseStackTraceInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DifferenceIAccountDataDumpErrorsInnerCauseStackTraceInner.parse_obj(obj)

        _obj = DifferenceIAccountDataDumpErrorsInnerCauseStackTraceInner.parse_obj({
            "class_loader_name": obj.get("classLoaderName"),
            "module_name": obj.get("moduleName"),
            "module_version": obj.get("moduleVersion"),
            "method_name": obj.get("methodName"),
            "file_name": obj.get("fileName"),
            "line_number": obj.get("lineNumber"),
            "class_name": obj.get("className"),
            "native_method": obj.get("nativeMethod")
        })
        return _obj


