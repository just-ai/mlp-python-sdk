# coding: utf-8

"""
    Datatypes specification for GPT task type

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator
from mlp_api.models.chat_message import ChatMessage
from mlp_api.models.logprobs import Logprobs

class ChatCompletionChoice(BaseModel):
    """
    ChatCompletionChoice
    """
    index: StrictInt = Field(...)
    message: Optional[ChatMessage] = None
    delta: Optional[ChatMessage] = None
    finish_reason: Optional[StrictStr] = None
    logprobs: Optional[Logprobs] = None
    __properties = ["index", "message", "delta", "finish_reason", "logprobs"]

    @validator('finish_reason')
    def finish_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('stop', 'length', 'tool_calls'):
            raise ValueError("must be one of enum values ('stop', 'length', 'tool_calls')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ChatCompletionChoice:
        """Create an instance of ChatCompletionChoice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of message
        if self.message:
            _dict['message'] = self.message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delta
        if self.delta:
            _dict['delta'] = self.delta.to_dict()
        # override the default output from pydantic by calling `to_dict()` of logprobs
        if self.logprobs:
            _dict['logprobs'] = self.logprobs.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ChatCompletionChoice:
        """Create an instance of ChatCompletionChoice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ChatCompletionChoice.parse_obj(obj)

        _obj = ChatCompletionChoice.parse_obj({
            "index": obj.get("index"),
            "message": ChatMessage.from_dict(obj.get("message")) if obj.get("message") is not None else None,
            "delta": ChatMessage.from_dict(obj.get("delta")) if obj.get("delta") is not None else None,
            "finish_reason": obj.get("finish_reason"),
            "logprobs": Logprobs.from_dict(obj.get("logprobs")) if obj.get("logprobs") is not None else None
        })
        return _obj


