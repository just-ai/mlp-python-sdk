# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt, StrictStr

class AccountLimitsData(BaseModel):
    """
    AccountLimitsData
    """
    base_model_instance_limit: StrictInt = Field(default=..., alias="baseModelInstanceLimit")
    derived_model_instance_limit: StrictInt = Field(default=..., alias="derivedModelInstanceLimit")
    gpu_model_instance_limit: StrictInt = Field(default=..., alias="gpuModelInstanceLimit")
    cpu_limit: StrictStr = Field(default=..., alias="cpuLimit")
    memory_limit: StrictStr = Field(default=..., alias="memoryLimit")
    ephemeral_disk_limit: StrictStr = Field(default=..., alias="ephemeralDiskLimit")
    predict_per_sec: StrictInt = Field(default=..., alias="predictPerSec")
    fit_per_minute: StrictInt = Field(default=..., alias="fitPerMinute")
    __properties = ["baseModelInstanceLimit", "derivedModelInstanceLimit", "gpuModelInstanceLimit", "cpuLimit", "memoryLimit", "ephemeralDiskLimit", "predictPerSec", "fitPerMinute"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccountLimitsData:
        """Create an instance of AccountLimitsData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccountLimitsData:
        """Create an instance of AccountLimitsData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AccountLimitsData.parse_obj(obj)

        _obj = AccountLimitsData.parse_obj({
            "base_model_instance_limit": obj.get("baseModelInstanceLimit"),
            "derived_model_instance_limit": obj.get("derivedModelInstanceLimit"),
            "gpu_model_instance_limit": obj.get("gpuModelInstanceLimit"),
            "cpu_limit": obj.get("cpuLimit"),
            "memory_limit": obj.get("memoryLimit"),
            "ephemeral_disk_limit": obj.get("ephemeralDiskLimit"),
            "predict_per_sec": obj.get("predictPerSec"),
            "fit_per_minute": obj.get("fitPerMinute")
        })
        return _obj


