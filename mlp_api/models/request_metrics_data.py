# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, validator
from mlp_api.models.request_details_data import RequestDetailsData

class RequestMetricsData(BaseModel):
    """
    RequestMetricsData
    """
    request_details_data: RequestDetailsData = Field(default=..., alias="requestDetailsData")
    request_type_data: StrictStr = Field(default=..., alias="requestTypeData")
    is_success: StrictBool = Field(default=..., alias="isSuccess")
    count: StrictInt = Field(...)
    __properties = ["requestDetailsData", "requestTypeData", "isSuccess", "count"]

    @validator('request_type_data')
    def request_type_data_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('FIT', 'PREDICT'):
            raise ValueError("must be one of enum values ('FIT', 'PREDICT')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RequestMetricsData:
        """Create an instance of RequestMetricsData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of request_details_data
        if self.request_details_data:
            _dict['requestDetailsData'] = self.request_details_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RequestMetricsData:
        """Create an instance of RequestMetricsData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RequestMetricsData.parse_obj(obj)

        _obj = RequestMetricsData.parse_obj({
            "request_details_data": RequestDetailsData.from_dict(obj.get("requestDetailsData")) if obj.get("requestDetailsData") is not None else None,
            "request_type_data": obj.get("requestTypeData"),
            "is_success": obj.get("isSuccess"),
            "count": obj.get("count")
        })
        return _obj


