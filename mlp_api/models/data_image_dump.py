# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator

class DataImageDump(BaseModel):
    """
    DataImageDump
    """
    name: StrictStr = Field(...)
    image: StrictStr = Field(...)
    data_path: StrictStr = Field(..., alias="dataPath")
    access_mode: Optional[StrictStr] = Field(None, alias="accessMode")
    __properties = ["name", "image", "dataPath", "accessMode"]

    @validator('access_mode')
    def access_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('private', 'public', 'restricted'):
            raise ValueError("must be one of enum values ('private', 'public', 'restricted')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DataImageDump:
        """Create an instance of DataImageDump from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DataImageDump:
        """Create an instance of DataImageDump from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DataImageDump.parse_obj(obj)

        _obj = DataImageDump.parse_obj({
            "name": obj.get("name"),
            "image": obj.get("image"),
            "data_path": obj.get("dataPath"),
            "access_mode": obj.get("accessMode")
        })
        return _obj

