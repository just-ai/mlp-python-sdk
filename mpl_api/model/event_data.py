# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from mpl_api import schemas  # noqa: F401


class EventData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "name",
            "namespace",
        }
        
        class properties:
            name = schemas.StrSchema
            namespace = schemas.StrSchema
            type = schemas.StrSchema
            createdTimestamp = schemas.StrSchema
            message = schemas.StrSchema
            reason = schemas.StrSchema
        
            @staticmethod
            def source() -> typing.Type['EventSource']:
                return EventSource
            firstSeenTimestamp = schemas.StrSchema
            lastSeenTimestamp = schemas.StrSchema
            count = schemas.Int32Schema
            kind = schemas.StrSchema
            fieldPath = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "namespace": namespace,
                "type": type,
                "createdTimestamp": createdTimestamp,
                "message": message,
                "reason": reason,
                "source": source,
                "firstSeenTimestamp": firstSeenTimestamp,
                "lastSeenTimestamp": lastSeenTimestamp,
                "count": count,
                "kind": kind,
                "fieldPath": fieldPath,
            }
    
    name: MetaOapg.properties.name
    namespace: MetaOapg.properties.namespace
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["namespace"]) -> MetaOapg.properties.namespace: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdTimestamp"]) -> MetaOapg.properties.createdTimestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> 'EventSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstSeenTimestamp"]) -> MetaOapg.properties.firstSeenTimestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastSeenTimestamp"]) -> MetaOapg.properties.lastSeenTimestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kind"]) -> MetaOapg.properties.kind: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldPath"]) -> MetaOapg.properties.fieldPath: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "namespace", "type", "createdTimestamp", "message", "reason", "source", "firstSeenTimestamp", "lastSeenTimestamp", "count", "kind", "fieldPath", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["namespace"]) -> MetaOapg.properties.namespace: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdTimestamp"]) -> typing.Union[MetaOapg.properties.createdTimestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> typing.Union[MetaOapg.properties.message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union['EventSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstSeenTimestamp"]) -> typing.Union[MetaOapg.properties.firstSeenTimestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastSeenTimestamp"]) -> typing.Union[MetaOapg.properties.lastSeenTimestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> typing.Union[MetaOapg.properties.count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kind"]) -> typing.Union[MetaOapg.properties.kind, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldPath"]) -> typing.Union[MetaOapg.properties.fieldPath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "namespace", "type", "createdTimestamp", "message", "reason", "source", "firstSeenTimestamp", "lastSeenTimestamp", "count", "kind", "fieldPath", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        namespace: typing.Union[MetaOapg.properties.namespace, str, ],
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        createdTimestamp: typing.Union[MetaOapg.properties.createdTimestamp, str, schemas.Unset] = schemas.unset,
        message: typing.Union[MetaOapg.properties.message, str, schemas.Unset] = schemas.unset,
        reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
        source: typing.Union['EventSource', schemas.Unset] = schemas.unset,
        firstSeenTimestamp: typing.Union[MetaOapg.properties.firstSeenTimestamp, str, schemas.Unset] = schemas.unset,
        lastSeenTimestamp: typing.Union[MetaOapg.properties.lastSeenTimestamp, str, schemas.Unset] = schemas.unset,
        count: typing.Union[MetaOapg.properties.count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        kind: typing.Union[MetaOapg.properties.kind, str, schemas.Unset] = schemas.unset,
        fieldPath: typing.Union[MetaOapg.properties.fieldPath, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EventData':
        return super().__new__(
            cls,
            *_args,
            name=name,
            namespace=namespace,
            type=type,
            createdTimestamp=createdTimestamp,
            message=message,
            reason=reason,
            source=source,
            firstSeenTimestamp=firstSeenTimestamp,
            lastSeenTimestamp=lastSeenTimestamp,
            count=count,
            kind=kind,
            fieldPath=fieldPath,
            _configuration=_configuration,
            **kwargs,
        )

from mpl_api.model.event_source import EventSource
